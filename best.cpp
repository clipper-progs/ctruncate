//
//     CTRUNCATE best routine
//     Copyright (C) Airlie McCoy
//     Originally best.cc in phaser
//
//     This code is distributed under the terms and conditions of the
//     CCP4 Program Suite Licence Agreement as a CCP4 Application.
//     A copy of the CCP4 licence can be obtained by writing to the
//     CCP4 Secretary, Daresbury Laboratory, Warrington WA4 4AD, UK.
//


#include "best.h"
#include <cmath>
//#include "clipper/core/clipper_util.h"

namespace ctruncate {

static float best[300] =  
	{ 119420.094,
		101659.641,
		81690.414,
		63365.090,
		57875.355,
		61608.578,
		72501.570,
		90078.656,
		109741.945,
		127082.102,
		137412.297,
		139580.219,
		137333.297,
		133472.188,
		129507.602,
		125845.414,
		120904.797,
		115925.875,
		110775.266,
		104672.258,
		97298.055,
		89829.648,
		83173.445,
		78112.539,
		73416.969,
		69432.289,
		65371.203,
		61651.734,
		58562.309,
		55816.238,
		53610.000,
		52034.773,
		51116.430,
		50133.047,
		49400.891,
		48117.367,
		47040.086,
		46641.746,
		46537.227,
		45864.223,
		46024.473,
		45880.148,
		46072.418,
		45931.863,
		46082.207,
		46202.676,
		46375.520,
		45861.191,
		45652.387,
		45039.852,
		44479.777,
		43549.965,
		43501.113,
		43396.234,
		42620.055,
		41100.250,
		39922.781,
		39130.934,
		38021.281,
		36782.801,
		35499.730,
		34165.281,
		32979.105,
		31575.912,
		30199.180,
		29096.426,
		28114.213,
		27363.445,
		26257.604,
		25265.410,
		24337.518,
		23700.688,
		22804.635,
		22165.574,
		21679.498,
		21230.615,
		20727.221,
		20303.465,
		20050.027,
		19911.986,
		19610.537,
		19203.639,
		18901.963,
		18540.625,
		18118.111,
		17952.115,
		17938.740,
		17940.045,
		17767.729,
		17619.865,
		17590.848,
		17258.307,
		17119.484,
		16943.379,
		16874.393,
		16605.168,
		16426.338,
		16412.588,
		16348.048,
		16272.690,
		15996.186,
		15787.716,
		15585.001,
		15554.448,
		15461.621,
		15466.696,
		15320.923,
		15018.120,
		14736.160,
		14501.164,
		14441.944,
		14253.150,
		14107.798,
		13894.836,
		13780.529,
		13684.477,
		13461.170,
		13299.096,
		13077.154,
		13108.808,
		13084.907,
		13235.410,
		13108.882,
		13132.099,
		13024.892,
		12993.081,
		12830.820,
		12948.324,
		12934.137,
		12931.499,
		12821.528,
		12988.473,
		13004.402,
		13063.121,
		13034.793,
		13068.688,
		13004.556,
		12888.828,
		12963.618,
		13111.302,
		13113.813,
		13059.174,
		13050.271,
		13214.941,
		13377.753,
		13383.613,
		13239.169,
		13218.517,
		13199.132,
		13154.157,
		13054.874,
		13083.780,
		13230.734,
		13353.612,
		13294.563,
		13324.932,
		13357.476,
		13570.960,
		13736.209,
		13983.591,
		14122.543,
		14225.675,
		14095.190,
		14082.426,
		14167.668,
		14348.723,
		14491.771,
		14480.615,
		14510.075,
		14619.429,
		14729.702,
		14846.838,
		14874.652,
		14945.954,
		15035.918,
		15075.190,
		15067.756,
		14902.410,
		14830.787,
		14857.209,
		14914.312,
		14954.278,
		15112.135,
		15209.297,
		15205.097,
		15024.275,
		14929.255,
		14948.889,
		14968.661,
		14960.080,
		14879.511,
		14852.724,
		14716.297,
		14628.658,
		14479.229,
		14316.959,
		14116.013,
		14189.159,
		14226.442,
		13770.954,
		13480.519,
		13410.201,
		13314.349,
		13192.502,
		13069.858,
		13146.034,
		13034.913,
		12845.740,
		12565.674,
		12494.399,
		12431.720,
		12224.740,
		12045.704,
		11936.945,
		12001.480,
		12094.969,
		12074.801,
		12003.505,
		11495.983,
		11344.455,
		11263.591,
		11174.380,
		11040.017,
		10927.041,
		10810.141,
		10751.963,
		10636.446,
		10556.304,
		10401.776,
		10351.462,
		10445.242,
		10447.674,
		10341.939,
		10140.619,
		10027.756,
		9964.771,
		9847.444,
		9818.661,
		9778.909,
		9726.898,
		9673.646,
		9495.260,
		9443.504,
		9342.603,
		9237.232,
		9147.548,
		8949.440,
		9064.902,
		8936.296,
		8842.546,
		8568.799,
		8741.543,
		8745.086,
		8737.993,
		8733.811,
		8556.928,
		8571.162,
		8452.438,
		8358.330,
		8383.448,
		8434.308,
		8541.982,
		8522.707,
		8395.525,
		8380.148,
		8368.124,
		8375.411,
		8058.358,
		7890.074,
		7953.468,
		8102.355,
		8013.817,
		7888.717,
		7916.124,
		7980.988,
		8043.755,
		7990.078,
		7948.800,
		8006.895,
		7844.749,
		7776.404,
		7710.022,
		7620.016,
		7512.692,
		7396.036,
		7360.436,
		7381.391,
		7391.329,
		7450.565,
		7304.477,
		7169.270,
		6941.855,
		6925.536,
		6893.606,
		7031.191,
		7002.648,
		6981.484,
		6899.487,
		6920.931,
		6939.107};
	
	float BEST(float ssqr)
	{
		// magic scale factor to put best data on scale for average electron squared
		const double k = 8.563714792513845e-06;
		const double offset = 0.009; // low resolution shell at 10.5409 A resolution
		const double step = 0.004091973;
		int s1 = (int) std::floor((ssqr - offset)/step); //truncations to lower value
        if (s1 < 0) return clipper::Util::nan(); //lower than 10.5409 A resolution
        if (s1 >= 299) return clipper::Util::nan(); //beyond highest resolution for BEST data (about 0.9 A)
		//linear interpolation
		double ssqr1 = s1*step + offset;
		double frac = (ssqr - ssqr1)/step;
		return k*((1.0-frac)*best[s1]+frac*best[s1+1]);
	}
    
    clipper::ftype Best::invresolsq_min()
    {
        return offset;
    }
    
    clipper::ftype Best::invresolsq_max()
    {
        return 299.0*step+offset;
    }
    
    bool Best::contains(const clipper::ftype ssqr)
    {
        return (ssqr > offset && ssqr < offset+299.0*step);
    }
    
    clipper::ftype Best::value(const clipper::ftype ssqr)
    {
        int s1 = (int) std::floor((ssqr - offset)/step); //truncations to lower value
        if (s1 < 0) return clipper::Util::nan(); //lower than 10.5409 A resolution
        if (s1 >= 299) return clipper::Util::nan(); //beyond highest resolution for BEST data (about 0.9 A)
        //linear interpolation
        double ssqr1 = s1*step + offset;
        double frac = (ssqr - ssqr1)/step;
        return k*((1.0-frac)*best[s1]+frac*best[s1+1]);
    }

	
}
