//
//     CTRUNCATE
//     Copyright (C) 2006-2011 Norman Stein, Charles Ballard
//
//     This code is distributed under the terms and conditions of the
//     CCP4 Program Suite Licence Agreement as a CCP4 Application.
//     A copy of the CCP4 licence can be obtained by writing to the
//     CCP4 Secretary, Daresbury Laboratory, Warrington WA4 4AD, UK.
//

#include "ctruncate_truncate.h"
#include <cstdio>
#include <cmath>

namespace ctruncate {

	int truncate_acentric(float I, float sigma, float S, float& J, float& sigJ, float& F, float& sigF, int& nrej, bool debug)
	{
		// look up tables calculated using quadpack
		// tables give values from h = -4.0 to h = 10.0 in steps of 0.1
		// declare as doubles for now, to avoid compiler warnings  
		/*
		 Z0 <- function(x,p) {exp(-(1/2)*(x-p)^2)}
		 Z1 <- function(x,p) {x*exp(-(1/2)*(x-p)^2)}
		 Z2 <- function(x,p) {(x^2)*exp(-(1/2)*(x-p)^2)}
		 Z05 <- function(x,p) {sqrt(x)*exp(-(1/2)*(x-p)^2)}
		 
		 ZJ <- function(h) {
		 a <- integrate(Z0,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 b <- integrate(Z1,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 as.numeric(b[1])/as.numeric(a[1])
		 }
		 
		 ZJSD <- function(h) {
		 a <- integrate(Z0,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 b <- integrate(Z1,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 c <- integrate(Z2,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 sqrt(as.numeric(c[1])/as.numeric(a[1]) - (as.numeric(b[1])/as.numeric(a[1]) )^2)
		 }
		 
		 ZF <- function(h) {
		 a <- integrate(Z0,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 b <- integrate(Z05,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 as.numeric(b[1])/as.numeric(a[1])
		 }
		 
		 ZFSD <- function(h) {
		 a <- integrate(Z0,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 b <- integrate(Z05,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 c <- integrate(Z1,lower=0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 sqrt(as.numeric(c[1])/as.numeric(a[1]) - (as.numeric(b[1])/as.numeric(a[1]) )^2)
		 }
		 
		 hvalues <- seq(-37,10,by=0.1)
		 
		 aZJ <- lapply(hvalues,ZJ)
		 
		 aZJSD <- lapply(hvalues,ZJSD)
		 
		 aZF <- lapply(hvalues,ZF)
		 
		 aZFSD <- lapply(hvalues,ZFSD)

		 cat("acentric calculation\n")
		 cat("<J/s>\n")
		 write.table(sprintf("%.5f, ",aZJ),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<sJ/s>\n")
		 write.table(sprintf("%.5f, ",aZJSD),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<F/s>\n")
		 write.table(sprintf("%.5f, ",aZF),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<sF/s>\n")
		 write.table(sprintf("%.5f, ",aZFSD),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")

		 */
		
		double ZJ[] = {
			0.02699, 0.02706, 0.02713, 0.02721, 0.02728, 0.02736, 0.02743, 0.02751, 0.02758, 0.02766, 
			0.02774, 0.02781, 0.02789, 0.02797, 0.02805, 0.02812, 0.02820, 0.02828, 0.02836, 0.02844, 
			0.02852, 0.02861, 0.02869, 0.02877, 0.02885, 0.02894, 0.02902, 0.02911, 0.02919, 0.02928, 
			0.02936, 0.02945, 0.02953, 0.02962, 0.02971, 0.02980, 0.02989, 0.02998, 0.03007, 0.03016, 
			0.03025, 0.03034, 0.03043, 0.03052, 0.03062, 0.03071, 0.03081, 0.03090, 0.03100, 0.03109, 
			0.03119, 0.03129, 0.03138, 0.03148, 0.03158, 0.03168, 0.03178, 0.03188, 0.03199, 0.03209, 
			0.03219, 0.03230, 0.03240, 0.03250, 0.03261, 0.03272, 0.03282, 0.03293, 0.03304, 0.03315, 
			0.03326, 0.03337, 0.03348, 0.03359, 0.03371, 0.03382, 0.03394, 0.03405, 0.03417, 0.03428, 
			0.03440, 0.03452, 0.03464, 0.03476, 0.03488, 0.03500, 0.03512, 0.03525, 0.03537, 0.03550, 
			0.03562, 0.03575, 0.03588, 0.03601, 0.03614, 0.03627, 0.03640, 0.03653, 0.03667, 0.03680, 
			0.03694, 0.03707, 0.03721, 0.03735, 0.03749, 0.03763, 0.03777, 0.03791, 0.03806, 0.03820, 
			0.03835, 0.03850, 0.03864, 0.03879, 0.03894, 0.03910, 0.03925, 0.03940, 0.03956, 0.03972, 
			0.03987, 0.04003, 0.04019, 0.04035, 0.04052, 0.04068, 0.04085, 0.04101, 0.04118, 0.04135, 
			0.04152, 0.04170, 0.04187, 0.04205, 0.04222, 0.04240, 0.04258, 0.04276, 0.04294, 0.04313, 
			0.04332, 0.04350, 0.04369, 0.04388, 0.04408, 0.04427, 0.04447, 0.04466, 0.04486, 0.04507, 
			0.04527, 0.04547, 0.04568, 0.04589, 0.04610, 0.04631, 0.04653, 0.04674, 0.04696, 0.04718, 
			0.04741, 0.04763, 0.04786, 0.04809, 0.04832, 0.04855, 0.04879, 0.04902, 0.04927, 0.04951, 
			0.04975, 0.05000, 0.05025, 0.05050, 0.05076, 0.05102, 0.05128, 0.05154, 0.05180, 0.05207, 
			0.05234, 0.05262, 0.05289, 0.05317, 0.05346, 0.05374, 0.05403, 0.05432, 0.05462, 0.05492, 
			0.05522, 0.05552, 0.05583, 0.05614, 0.05646, 0.05678, 0.05710, 0.05742, 0.05775, 0.05809, 
			0.05842, 0.05876, 0.05911, 0.05946, 0.05981, 0.06017, 0.06053, 0.06090, 0.06127, 0.06164, 
			0.06202, 0.06241, 0.06279, 0.06319, 0.06359, 0.06399, 0.06440, 0.06481, 0.06523, 0.06566, 
			0.06609, 0.06652, 0.06696, 0.06741, 0.06787, 0.06832, 0.06879, 0.06926, 0.06974, 0.07023, 
			0.07072, 0.07122, 0.07172, 0.07223, 0.07276, 0.07328, 0.07382, 0.07436, 0.07491, 0.07547, 
			0.07604, 0.07661, 0.07720, 0.07779, 0.07840, 0.07901, 0.07963, 0.08026, 0.08090, 0.08155, 
			0.08221, 0.08289, 0.08357, 0.08426, 0.08497, 0.08569, 0.08642, 0.08716, 0.08792, 0.08868, 
			0.08947, 0.09026, 0.09107, 0.09189, 0.09273, 0.09358, 0.09445, 0.09534, 0.09624, 0.09716, 
			0.09809, 0.09905, 0.10002, 0.10101, 0.10202, 0.10305, 0.10410, 0.10517, 0.10627, 0.10738, 
			0.10852, 0.10969, 0.11087, 0.11209, 0.11333, 0.11460, 0.11589, 0.11721, 0.11857, 0.11995, 
			0.12137, 0.12282, 0.12430, 0.12582, 0.12737, 0.12897, 0.13060, 0.13227, 0.13398, 0.13574, 
			0.13755, 0.13940, 0.14129, 0.14324, 0.14525, 0.14730, 0.14941, 0.15159, 0.15382, 0.15612, 
			0.15848, 0.16092, 0.16342, 0.16601, 0.16867, 0.17141, 0.17424, 0.17716, 0.18017, 0.18329, 
			0.18650, 0.18983, 0.19327, 0.19682, 0.20051, 0.20432, 0.20827, 0.21237, 0.21662, 0.22103, 
			0.22561, 0.23037, 0.23531, 0.24046, 0.24581, 0.25139, 0.25720, 0.26327, 0.26959, 0.27620, 
			0.28310, 0.29032, 0.29787, 0.30577, 0.31406, 0.32274, 0.33186, 0.34143, 0.35150, 0.36208, 
			0.37322, 0.38495, 0.39731, 0.41036, 0.42413, 0.43868, 0.45406, 0.47033, 0.48755, 0.50580, 
			0.52514, 0.54564, 0.56740, 0.59050, 0.61503, 0.64108, 0.66876, 0.69817, 0.72942, 0.76262, 
			0.79788, 0.83533, 0.87507, 0.91722, 0.96188, 1.00916, 1.05915, 1.11192, 1.16756, 1.22611, 
			1.28760, 1.35205, 1.41944, 1.48974, 1.56288, 1.63879, 1.71735, 1.79844, 1.88189, 1.96756, 
			2.05525, 2.14478, 2.23597, 2.32863, 2.42258, 2.51764, 2.61365, 2.71046, 2.80794, 2.90596, 
			3.00444, 3.10327, 3.20239, 3.30172, 3.40123, 3.50087, 3.60061, 3.70042, 3.80029, 3.90020, 
			4.00013, 4.10009, 4.20006, 4.30004, 4.40002, 4.50002, 4.60001, 4.70001, 4.80000, 4.90000, 
			5.00000, 5.10000, 5.20000, 5.30000, 5.40000, 5.50000, 5.60000, 5.70000, 5.80000, 5.90000, 
			6.00000, 6.10000, 6.20000, 6.30000, 6.40000, 6.50000, 6.60000, 6.70000, 6.80000, 6.90000, 
			7.00000, 7.10000, 7.20000, 7.30000, 7.40000, 7.50000, 7.60000, 7.70000, 7.80000, 7.90000, 
			8.00000, 8.10000, 8.20000, 8.30000, 8.40000, 8.50000, 8.60000, 8.70000, 8.80000, 8.90000, 
			9.00000, 9.10000, 9.20000, 9.30000, 9.40000, 9.50000, 9.60000, 9.70000, 9.80000, 9.90000, 
			10.00000 };
		
		double ZJSD[] = {
			0.02697, 0.02704, 0.02711, 0.02719, 0.02726, 0.02734, 0.02741, 0.02749, 0.02756, 0.02764, 
			0.02771, 0.02779, 0.02787, 0.02795, 0.02802, 0.02810, 0.02818, 0.02826, 0.02834, 0.02842, 
			0.02850, 0.02858, 0.02866, 0.02875, 0.02883, 0.02891, 0.02900, 0.02908, 0.02917, 0.02925, 
			0.02934, 0.02942, 0.02951, 0.02960, 0.02968, 0.02977, 0.02986, 0.02995, 0.03004, 0.03013, 
			0.03022, 0.03031, 0.03040, 0.03050, 0.03059, 0.03068, 0.03078, 0.03087, 0.03097, 0.03106, 
			0.03116, 0.03126, 0.03135, 0.03145, 0.03155, 0.03165, 0.03175, 0.03185, 0.03195, 0.03206, 
			0.03216, 0.03226, 0.03237, 0.03247, 0.03258, 0.03268, 0.03279, 0.03290, 0.03300, 0.03311, 
			0.03322, 0.03333, 0.03344, 0.03356, 0.03367, 0.03378, 0.03390, 0.03401, 0.03413, 0.03424, 
			0.03436, 0.03448, 0.03460, 0.03472, 0.03484, 0.03496, 0.03508, 0.03520, 0.03533, 0.03545, 
			0.03558, 0.03571, 0.03583, 0.03596, 0.03609, 0.03622, 0.03635, 0.03648, 0.03662, 0.03675, 
			0.03689, 0.03702, 0.03716, 0.03730, 0.03744, 0.03758, 0.03772, 0.03786, 0.03800, 0.03815, 
			0.03829, 0.03844, 0.03859, 0.03874, 0.03889, 0.03904, 0.03919, 0.03934, 0.03950, 0.03965, 
			0.03981, 0.03997, 0.04013, 0.04029, 0.04045, 0.04061, 0.04078, 0.04095, 0.04111, 0.04128, 
			0.04145, 0.04162, 0.04180, 0.04197, 0.04215, 0.04232, 0.04250, 0.04268, 0.04287, 0.04305, 
			0.04323, 0.04342, 0.04361, 0.04380, 0.04399, 0.04418, 0.04438, 0.04458, 0.04477, 0.04497, 
			0.04518, 0.04538, 0.04559, 0.04579, 0.04600, 0.04621, 0.04643, 0.04664, 0.04686, 0.04708, 
			0.04730, 0.04752, 0.04775, 0.04798, 0.04821, 0.04844, 0.04867, 0.04891, 0.04915, 0.04939, 
			0.04963, 0.04988, 0.05013, 0.05038, 0.05063, 0.05088, 0.05114, 0.05140, 0.05167, 0.05193, 
			0.05220, 0.05247, 0.05275, 0.05303, 0.05331, 0.05359, 0.05388, 0.05417, 0.05446, 0.05475, 
			0.05505, 0.05535, 0.05566, 0.05597, 0.05628, 0.05660, 0.05691, 0.05724, 0.05756, 0.05789, 
			0.05823, 0.05856, 0.05891, 0.05925, 0.05960, 0.05995, 0.06031, 0.06067, 0.06104, 0.06141, 
			0.06179, 0.06217, 0.06255, 0.06294, 0.06333, 0.06373, 0.06414, 0.06455, 0.06496, 0.06538, 
			0.06580, 0.06623, 0.06667, 0.06711, 0.06756, 0.06801, 0.06847, 0.06894, 0.06941, 0.06989, 
			0.07037, 0.07086, 0.07136, 0.07187, 0.07238, 0.07290, 0.07343, 0.07396, 0.07450, 0.07505, 
			0.07561, 0.07618, 0.07675, 0.07733, 0.07793, 0.07853, 0.07914, 0.07976, 0.08039, 0.08103, 
			0.08167, 0.08233, 0.08300, 0.08368, 0.08438, 0.08508, 0.08579, 0.08652, 0.08726, 0.08801, 
			0.08877, 0.08955, 0.09034, 0.09114, 0.09196, 0.09279, 0.09364, 0.09450, 0.09538, 0.09628, 
			0.09719, 0.09811, 0.09906, 0.10002, 0.10100, 0.10200, 0.10302, 0.10406, 0.10512, 0.10620, 
			0.10731, 0.10843, 0.10958, 0.11075, 0.11195, 0.11317, 0.11442, 0.11569, 0.11700, 0.11833, 
			0.11969, 0.12108, 0.12250, 0.12395, 0.12544, 0.12696, 0.12852, 0.13012, 0.13175, 0.13342, 
			0.13514, 0.13689, 0.13869, 0.14054, 0.14243, 0.14437, 0.14636, 0.14841, 0.15051, 0.15266, 
			0.15488, 0.15716, 0.15949, 0.16190, 0.16437, 0.16692, 0.16954, 0.17223, 0.17501, 0.17787, 
			0.18082, 0.18386, 0.18700, 0.19023, 0.19357, 0.19701, 0.20057, 0.20425, 0.20805, 0.21198, 
			0.21604, 0.22024, 0.22459, 0.22910, 0.23377, 0.23861, 0.24362, 0.24882, 0.25422, 0.25982, 
			0.26563, 0.27167, 0.27794, 0.28446, 0.29124, 0.29828, 0.30562, 0.31324, 0.32118, 0.32945, 
			0.33805, 0.34701, 0.35634, 0.36606, 0.37618, 0.38671, 0.39768, 0.40910, 0.42099, 0.43335, 
			0.44620, 0.45956, 0.47343, 0.48781, 0.50272, 0.51815, 0.53410, 0.55056, 0.56751, 0.58494, 
			0.60281, 0.62109, 0.63974, 0.65869, 0.67789, 0.69726, 0.71673, 0.73619, 0.75555, 0.77470, 
			0.79353, 0.81192, 0.82977, 0.84696, 0.86339, 0.87895, 0.89357, 0.90718, 0.91972, 0.93117, 
			0.94152, 0.95076, 0.95894, 0.96609, 0.97226, 0.97755, 0.98200, 0.98573, 0.98880, 0.99130, 
			0.99331, 0.99491, 0.99617, 0.99715, 0.99790, 0.99847, 0.99890, 0.99921, 0.99945, 0.99961, 
			0.99973, 0.99982, 0.99988, 0.99992, 0.99995, 0.99996, 0.99998, 0.99999, 0.99999, 0.99999, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000  };
		
		double ZF[] = {
			0.14578, 0.14598, 0.14617, 0.14637, 0.14657, 0.14677, 0.14697, 0.14717, 0.14737, 0.14758, 
			0.14778, 0.14798, 0.14819, 0.14840, 0.14860, 0.14881, 0.14902, 0.14923, 0.14944, 0.14965, 
			0.14986, 0.15008, 0.15029, 0.15051, 0.15072, 0.15094, 0.15116, 0.15137, 0.15159, 0.15182, 
			0.15204, 0.15226, 0.15248, 0.15271, 0.15293, 0.15316, 0.15339, 0.15362, 0.15385, 0.15408, 
			0.15431, 0.15454, 0.15478, 0.15501, 0.15525, 0.15548, 0.15572, 0.15596, 0.15620, 0.15644, 
			0.15669, 0.15693, 0.15717, 0.15742, 0.15767, 0.15792, 0.15817, 0.15842, 0.15867, 0.15892, 
			0.15918, 0.15943, 0.15969, 0.15995, 0.16021, 0.16047, 0.16073, 0.16099, 0.16126, 0.16152, 
			0.16179, 0.16206, 0.16233, 0.16260, 0.16287, 0.16315, 0.16342, 0.16370, 0.16398, 0.16426, 
			0.16454, 0.16482, 0.16510, 0.16539, 0.16568, 0.16597, 0.16626, 0.16655, 0.16684, 0.16713, 
			0.16743, 0.16773, 0.16803, 0.16833, 0.16863, 0.16894, 0.16924, 0.16955, 0.16986, 0.17017, 
			0.17048, 0.17080, 0.17111, 0.17143, 0.17175, 0.17207, 0.17239, 0.17272, 0.17305, 0.17337, 
			0.17371, 0.17404, 0.17437, 0.17471, 0.17505, 0.17539, 0.17573, 0.17607, 0.17642, 0.17677, 
			0.17712, 0.17747, 0.17783, 0.17818, 0.17854, 0.17890, 0.17927, 0.17963, 0.18000, 0.18037, 
			0.18074, 0.18112, 0.18150, 0.18187, 0.18226, 0.18264, 0.18303, 0.18342, 0.18381, 0.18420, 
			0.18460, 0.18500, 0.18540, 0.18580, 0.18621, 0.18662, 0.18703, 0.18745, 0.18787, 0.18829, 
			0.18871, 0.18914, 0.18957, 0.19000, 0.19044, 0.19087, 0.19132, 0.19176, 0.19221, 0.19266, 
			0.19311, 0.19357, 0.19403, 0.19449, 0.19496, 0.19543, 0.19590, 0.19638, 0.19686, 0.19735, 
			0.19783, 0.19833, 0.19882, 0.19932, 0.19982, 0.20033, 0.20084, 0.20135, 0.20187, 0.20239, 
			0.20292, 0.20345, 0.20398, 0.20452, 0.20506, 0.20561, 0.20616, 0.20672, 0.20728, 0.20785, 
			0.20842, 0.20899, 0.20957, 0.21015, 0.21074, 0.21134, 0.21193, 0.21254, 0.21315, 0.21376, 
			0.21438, 0.21501, 0.21564, 0.21627, 0.21691, 0.21756, 0.21822, 0.21887, 0.21954, 0.22021, 
			0.22089, 0.22157, 0.22226, 0.22296, 0.22366, 0.22437, 0.22509, 0.22581, 0.22654, 0.22728, 
			0.22802, 0.22877, 0.22953, 0.23030, 0.23107, 0.23185, 0.23264, 0.23344, 0.23425, 0.23506, 
			0.23589, 0.23672, 0.23756, 0.23841, 0.23926, 0.24013, 0.24101, 0.24190, 0.24279, 0.24370, 
			0.24461, 0.24554, 0.24648, 0.24743, 0.24838, 0.24935, 0.25033, 0.25133, 0.25233, 0.25335, 
			0.25438, 0.25542, 0.25647, 0.25754, 0.25862, 0.25971, 0.26082, 0.26194, 0.26307, 0.26422, 
			0.26539, 0.26657, 0.26777, 0.26898, 0.27021, 0.27145, 0.27271, 0.27399, 0.27529, 0.27660, 
			0.27794, 0.27929, 0.28066, 0.28206, 0.28347, 0.28490, 0.28636, 0.28784, 0.28934, 0.29086, 
			0.29241, 0.29398, 0.29558, 0.29720, 0.29885, 0.30052, 0.30222, 0.30396, 0.30572, 0.30751, 
			0.30933, 0.31118, 0.31307, 0.31499, 0.31694, 0.31893, 0.32102, 0.32308, 0.32519, 0.32733, 
			0.32951, 0.33174, 0.33401, 0.33632, 0.33868, 0.34109, 0.34355, 0.34606, 0.34863, 0.35125, 
			0.35393, 0.35666, 0.35946, 0.36232, 0.36524, 0.36824, 0.37125, 0.37439, 0.37759, 0.38088, 
			0.38425, 0.38771, 0.39126, 0.39490, 0.39864, 0.40247, 0.40641, 0.41046, 0.41462, 0.41890, 
			0.42331, 0.42784, 0.43250, 0.43731, 0.44226, 0.44737, 0.45264, 0.45808, 0.46369, 0.46949, 
			0.47548, 0.48168, 0.48809, 0.49473, 0.50160, 0.50873, 0.51611, 0.52378, 0.53173, 0.53999, 
			0.54857, 0.55749, 0.56677, 0.57643, 0.58649, 0.59696, 0.60788, 0.61927, 0.63115, 0.64354, 
			0.65648, 0.66999, 0.68410, 0.69884, 0.71424, 0.73033, 0.74715, 0.76471, 0.78305, 0.80220, 
			0.82218, 0.84301, 0.86472, 0.88732, 0.91082, 0.93522, 0.96052, 0.98672, 1.01379, 1.04171, 
			1.07043, 1.09992, 1.13013, 1.16097, 1.19239, 1.22431, 1.25663, 1.28928, 1.32215, 1.35516, 
			1.38822, 1.42125, 1.45416, 1.48689, 1.51936, 1.55152, 1.58334, 1.61476, 1.64576, 1.67632, 
			1.70644, 1.73609, 1.76528, 1.79402, 1.82231, 1.85016, 1.87758, 1.90459, 1.93121, 1.95743, 
			1.98329, 2.00880, 2.03396, 2.05879, 2.08331, 2.10752, 2.13144, 2.15508, 2.17845, 2.20156, 
			2.22441, 2.24703, 2.26940, 2.29155, 2.31347, 2.33519, 2.35669, 2.37799, 2.39910, 2.42001, 
			2.44074, 2.46129, 2.48167, 2.50187, 2.52191, 2.54179, 2.56150, 2.58107, 2.60048, 2.61974, 
			2.63887, 2.65785, 2.67669, 2.69540, 2.71397, 2.73242, 2.75074, 2.76894, 2.78702, 2.80498, 
			2.82282, 2.84055, 2.85816, 2.87567, 2.89307, 2.91036, 2.92755, 2.94464, 2.96163, 2.97852, 
			2.99531, 3.01201, 3.02862, 3.04513, 3.06156, 3.07789, 3.09414, 3.11030, 3.12638, 3.14237, 
			3.15829  };
		
		double ZFSD[] = {
			0.07573, 0.07584, 0.07594, 0.07604, 0.07615, 0.07625, 0.07636, 0.07647, 0.07657, 0.07668, 
			0.07679, 0.07689, 0.07700, 0.07711, 0.07722, 0.07733, 0.07744, 0.07755, 0.07766, 0.07777, 
			0.07788, 0.07800, 0.07811, 0.07822, 0.07834, 0.07845, 0.07857, 0.07868, 0.07880, 0.07891, 
			0.07903, 0.07915, 0.07927, 0.07938, 0.07950, 0.07962, 0.07974, 0.07986, 0.07998, 0.08011, 
			0.08023, 0.08035, 0.08047, 0.08060, 0.08072, 0.08085, 0.08097, 0.08110, 0.08122, 0.08135, 
			0.08148, 0.08161, 0.08174, 0.08187, 0.08200, 0.08213, 0.08226, 0.08239, 0.08252, 0.08265, 
			0.08279, 0.08292, 0.08306, 0.08319, 0.08333, 0.08347, 0.08361, 0.08374, 0.08388, 0.08402, 
			0.08416, 0.08430, 0.08445, 0.08459, 0.08473, 0.08488, 0.08502, 0.08517, 0.08531, 0.08546, 
			0.08561, 0.08575, 0.08590, 0.08605, 0.08620, 0.08636, 0.08651, 0.08666, 0.08681, 0.08697, 
			0.08712, 0.08728, 0.08744, 0.08760, 0.08775, 0.08791, 0.08807, 0.08824, 0.08840, 0.08856, 
			0.08873, 0.08889, 0.08906, 0.08922, 0.08939, 0.08956, 0.08973, 0.08990, 0.09007, 0.09024, 
			0.09042, 0.09059, 0.09077, 0.09094, 0.09112, 0.09130, 0.09148, 0.09166, 0.09184, 0.09202, 
			0.09220, 0.09239, 0.09257, 0.09276, 0.09295, 0.09314, 0.09333, 0.09352, 0.09371, 0.09391, 
			0.09410, 0.09430, 0.09449, 0.09469, 0.09489, 0.09509, 0.09530, 0.09550, 0.09570, 0.09591, 
			0.09612, 0.09633, 0.09654, 0.09675, 0.09696, 0.09718, 0.09739, 0.09761, 0.09783, 0.09805, 
			0.09827, 0.09849, 0.09871, 0.09894, 0.09917, 0.09940, 0.09963, 0.09986, 0.10009, 0.10033, 
			0.10057, 0.10080, 0.10104, 0.10129, 0.10153, 0.10178, 0.10202, 0.10227, 0.10252, 0.10277, 
			0.10303, 0.10329, 0.10354, 0.10380, 0.10407, 0.10433, 0.10459, 0.10486, 0.10513, 0.10540, 
			0.10568, 0.10595, 0.10623, 0.10651, 0.10680, 0.10708, 0.10737, 0.10766, 0.10795, 0.10824, 
			0.10854, 0.10884, 0.10914, 0.10944, 0.10975, 0.11006, 0.11037, 0.11068, 0.11100, 0.11132, 
			0.11164, 0.11197, 0.11229, 0.11262, 0.11296, 0.11329, 0.11363, 0.11397, 0.11432, 0.11467, 
			0.11502, 0.11537, 0.11573, 0.11609, 0.11646, 0.11682, 0.11720, 0.11757, 0.11795, 0.11833, 
			0.11872, 0.11910, 0.11950, 0.11989, 0.12030, 0.12070, 0.12111, 0.12152, 0.12194, 0.12236, 
			0.12278, 0.12321, 0.12365, 0.12409, 0.12453, 0.12498, 0.12543, 0.12589, 0.12635, 0.12682, 
			0.12729, 0.12777, 0.12825, 0.12874, 0.12923, 0.12973, 0.13024, 0.13075, 0.13126, 0.13178, 
			0.13231, 0.13285, 0.13339, 0.13394, 0.13449, 0.13505, 0.13562, 0.13619, 0.13678, 0.13737, 
			0.13796, 0.13857, 0.13918, 0.13980, 0.14043, 0.14106, 0.14171, 0.14236, 0.14302, 0.14369, 
			0.14437, 0.14506, 0.14576, 0.14647, 0.14719, 0.14792, 0.14866, 0.14941, 0.15017, 0.15094, 
			0.15173, 0.15252, 0.15333, 0.15415, 0.15498, 0.15583, 0.15669, 0.15756, 0.15845, 0.15935, 
			0.16026, 0.16119, 0.16214, 0.16310, 0.16408, 0.16508, 0.16596, 0.16699, 0.16804, 0.16911, 
			0.17020, 0.17131, 0.17244, 0.17358, 0.17475, 0.17595, 0.17716, 0.17840, 0.17966, 0.18095, 
			0.18226, 0.18360, 0.18497, 0.18636, 0.18779, 0.18924, 0.19082, 0.19233, 0.19391, 0.19550, 
			0.19711, 0.19876, 0.20046, 0.20218, 0.20395, 0.20575, 0.20760, 0.20950, 0.21143, 0.21342, 
			0.21545, 0.21753, 0.21966, 0.22185, 0.22409, 0.22639, 0.22874, 0.23116, 0.23363, 0.23618, 
			0.23878, 0.24146, 0.24420, 0.24702, 0.24990, 0.25287, 0.25591, 0.25903, 0.26222, 0.26550, 
			0.26886, 0.27230, 0.27583, 0.27944, 0.28313, 0.28690, 0.29075, 0.29468, 0.29868, 0.30274, 
			0.30687, 0.31106, 0.31529, 0.31956, 0.32386, 0.32816, 0.33246, 0.33673, 0.34095, 0.34510, 
			0.34915, 0.35307, 0.35683, 0.36039, 0.36372, 0.36678, 0.36952, 0.37190, 0.37389, 0.37544, 
			0.37653, 0.37711, 0.37716, 0.37667, 0.37561, 0.37398, 0.37179, 0.36906, 0.36581, 0.36207, 
			0.35789, 0.35332, 0.34841, 0.34323, 0.33783, 0.33228, 0.32663, 0.32095, 0.31529, 0.30968, 
			0.30416, 0.29878, 0.29355, 0.28848, 0.28360, 0.27891, 0.27440, 0.27009, 0.26596, 0.26201, 
			0.25823, 0.25462, 0.25116, 0.24784, 0.24466, 0.24161, 0.23868, 0.23586, 0.23314, 0.23053, 
			0.22800, 0.22556, 0.22321, 0.22093, 0.21872, 0.21658, 0.21451, 0.21250, 0.21054, 0.20865, 
			0.20680, 0.20501, 0.20326, 0.20156, 0.19990, 0.19828, 0.19670, 0.19516, 0.19366, 0.19220, 
			0.19076, 0.18936, 0.18799, 0.18665, 0.18534, 0.18406, 0.18281, 0.18158, 0.18037, 0.17919, 
			0.17804, 0.17690, 0.17579, 0.17470, 0.17363, 0.17257, 0.17154, 0.17053, 0.16953, 0.16856, 
			0.16760, 0.16665, 0.16572, 0.16481, 0.16391, 0.16303, 0.16216, 0.16131, 0.16047, 0.15964, 
			0.15882 };

#ifndef USE_TABLES
		
		const double LIMIT_L(-22.0);
		const double LIMIT_IS(-3.7);
		const double LIMIT_U(20.0);
		
		J = sigJ = F = sigF = clipper::Util::nan();
		
		double h = I/sigma - sigma/S;
		if (I/sigma < LIMIT_IS || h < LIMIT_L ) {
			nrej++;
			if (debug) printf("unphys: %f %f %f\n",I,sigma,I/sigma);
			return(0);
		} else {
			if ( clipper::Util::is_nan(h) ) {
				return(0);
			} else {
				if (h > LIMIT_U) {
					J = h*sigma;
					sigJ = sigma;
					F = sqrt(J);
					sigF = 0.5*sigma/F;
				} else {
					double x = -h;
					double moment[5];
					double ep = std::exp(-0.25*h*h);
					//moment[0] = std::sqrt(std::pow(2.0,0.0)/clipper::Util::pi() )*std::pow(2.0,-0.5)*tgamma(1.0)*ep*ctruncate::Utils::pbdv(-1.0,x);
					//moment[1] = std::sqrt(std::pow(2.0,0.5)/clipper::Util::pi() )*std::pow(2.0,-0.75)*tgamma(1.5)*ep*ctruncate::Utils::pbdv(-1.5,x);
					//moment[2] = std::sqrt(std::pow(2.0,1.0)/clipper::Util::pi() )*std::pow(2.0,-1.0)*tgamma(2.0)*ep*ctruncate::Utils::pbdv(-2.0,x);
					//moment[4] = std::sqrt(std::pow(2.0,2.0)/clipper::Util::pi() )*std::pow(2.0,-1.5)*tgamma(3.0)*ep*ctruncate::Utils::pbdv(-3.0,x);
					for (int i=0 ; i != 5 ; ++i ) {
						double mu = 0.5*double(i);
						double a = -mu-1.0;
						moment[i] = std::sqrt(std::pow(2.0,mu)/clipper::Util::pi() )*std::pow(2.0,-(mu+1.0)/2.0)*tgamma(mu+1.0)*ep*ctruncate::Utils::pbdv(a,x);
					}
					J = moment[2]/moment[0]*sigma;
					sigJ = std::sqrt(moment[4]/moment[0] - std::pow(moment[2],2)/std::pow(moment[0],2))*sigma;
					F = moment[1]/moment[0]*sqrt(sigma);
					sigF = std::sqrt((moment[2]/moment[0]) - std::pow(moment[1],2)/std::pow(moment[0],2))*sqrt(sigma);
				}
			}
			return(1);
		}
#else		
		float h,x,delta;
		int n;
        const float LIMIT_U(10.0);
		const float LIMIT_L(-37.0);
		const float LIMIT_IS(-3.7);
		// Bayesian statistics tells us to modify I/sigma by subtracting off sigma/S
		// where S is the mean intensity in the resolution shell
		h = I/sigma - sigma/S;
		// reject as unphysical reflections for which I < -3.7 sigma, or h < -37.0
		if (I/sigma < LIMIT_IS || h < LIMIT_L ) {
			nrej++;
			if (debug) printf("unphys: %f %f %f %f\n",I,sigma,S,h);
			return(0);
		} else {
			if (h < LIMIT_U) {
				// use look up table if -37.0 < h < 10.0
				x = 10.0*(h-LIMIT_L);
				n = int(x);
				delta = x-n;
				// linear interpolation
				J = (1.0-delta)*ZJ[n] + delta*ZJ[n+1];
				sigJ = (1.0-delta)*ZJSD[n] + delta*ZJSD[n+1];
				F = (1.0-delta)*ZF[n] + delta*ZF[n+1];
				sigF = (1.0-delta)*ZFSD[n] + delta*ZFSD[n+1];
				// look up table gives J/sigma, so multiply by sigma to get output intensity
				J *= sigma;
				sigJ *= sigma;
				F *= sqrt(sigma);
				sigF *= sqrt(sigma);
			} else {
				// if h > 10.0 intensities are unchanged by truncate
				J = h*sigma;
				sigJ = sigma;
				F = sqrt(J);
				sigF = 0.5*sigma/F;
			}
			return(1);
		}
#endif // USE_TABLES
	}
	
	
	int truncate_centric(float I, float sigma, float S, float& J, float& sigJ, float& F, float& sigF, int& nrej, bool debug)
	{
		// look up tables calculated using quadpack
		// tables give values from h = -10.0 to h = 10.0 in steps of 0.1
		/*
		 Z0 <- function(x,p) {exp(-(1/2)*(x-p)^2)/sqrt(x)}
		 Z1 <- function(x,p) {sqrt(x)*exp(-(1/2)*(x-p)^2)}
		 Z2 <- function(x,p) {(x^(3/2))*exp(-(1/2)*(x-p)^2)}
		 Z05 <- function(x,p) {exp(-(1/2)*(x-p)^2)}
		 
		 ZJ <- function(h) {
		 a1 <- integrate(Z0,lower=0.0,upper=0.01, p=h, rel.tol = 1.0e-8 )
		 a2 <- integrate(Z0,lower=0.01,upper=Inf, p=h, rel.tol = 1.0e-8 )
		 b <- integrate(Z1,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 as.numeric(b[1])/(as.numeric(a1[1])+as.numeric(a2[1]))
		 }
		 
		 ZJSD <- function(h) {
		 a1 <- integrate(Z0,lower=0.0,upper=0.01, p=h, rel.tol = 1.0e-8 )
		 a2 <- integrate(Z0,lower=0.01,upper=Inf, p=h, rel.tol = 1.0e-8 )
		 b <- integrate(Z1,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 c <- integrate(Z2,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 sqrt(as.numeric(c[1])/(as.numeric(a1[1])+as.numeric(a2[1])) - (as.numeric(b[1])/(as.numeric(a1[1])+as.numeric(a2[1])) )^2)
		 }
		 
		 ZF <- function(h) {
		 a1 <- integrate(Z0,lower=0.0,upper=0.01, p=h, rel.tol = 1.0e-8 )
		 a2 <- integrate(Z0,lower=0.01,upper=Inf, p=h, rel.tol = 1.0e-8 )
		 b <- integrate(Z05,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8 )
		 (as.numeric(b[1]))/(as.numeric(a1[1])+as.numeric(a2[1]))
		 }
		 
		 ZFSD <- function(h) {
		 a1 <- integrate(Z0,lower=0.0,upper=0.01, p=h, rel.tol = 1.0e-8 )
		 a2 <- integrate(Z0,lower=0.01,upper=Inf, p=h, rel.tol = 1.0e-8 )
		 b <- integrate(Z05,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 c <- integrate(Z1,lower=0.0,upper=Inf, p=h, rel.tol = 1.0e-8)
		 sqrt(as.numeric(c[1])/(as.numeric(a1[1])+as.numeric(a2[1]))- (as.numeric(b[1])/(as.numeric(a1[1])+as.numeric(a2[1])) )^2)
		 }

		 hvalues <- seq(-37,10,by=0.1)
		 
		 cZJ <- lapply(hvalues,ZJ)
		 
		 cZJSD <- lapply(hvalues,ZJSD)
		 
		 cZF <- lapply(hvalues,ZF)
		 
		 cZFSD <- lapply(hvalues,ZFSD)
		 
		 cat("centric calculation\n")
		 cat("<J/s>\n")
		 write.table(sprintf("%.5f, ",cZJ),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<sJ/s>\n")
		 write.table(sprintf("%.5f, ",cZJSD),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<F/s>\n")
		 write.table(sprintf("%.5f, ",cZF),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<sF/s>\n")
		 write.table(sprintf("%.5f, ",cZFSD),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n<F>/<sF>\n")
		 write.table(sprintf("%.5f, ",fsigf),row.names=FALSE,col.names=FALSE, sep=", ", quote=FALSE,eol=" ")
		 cat("\n")
		 */
		
		double ZJ[] = {
			0.01362, 0.01366, 0.01370, 0.01373, 0.01377, 0.01381, 0.01384, 0.01388, 0.01392, 0.01396,
			0.01400, 0.01404, 0.01408, 0.01411, 0.01415, 0.01419, 0.01423, 0.01427, 0.01431, 0.01435,
			0.01439, 0.01444, 0.01448, 0.01452, 0.01456, 0.01460, 0.01464, 0.01469, 0.01473, 0.01477,
			0.01481, 0.01486, 0.01490, 0.01494, 0.01499, 0.01503, 0.01508, 0.01512, 0.01517, 0.01521,
			0.01526, 0.01531, 0.01535, 0.01540, 0.01545, 0.01549, 0.01554, 0.01559, 0.01564, 0.01568,
			0.01573, 0.01578, 0.01583, 0.01588, 0.01593, 0.01598, 0.01603, 0.01608, 0.01613, 0.01618,
			0.01624, 0.01629, 0.01634, 0.01639, 0.01645, 0.01650, 0.01655, 0.01661, 0.01666, 0.01672,
			0.01677, 0.01683, 0.01688, 0.01694, 0.01700, 0.01705, 0.01711, 0.01717, 0.01723, 0.01729,
			0.01735, 0.01741, 0.01747, 0.01753, 0.01759, 0.01765, 0.01771, 0.01777, 0.01783, 0.01790,
			0.01796, 0.01802, 0.01809, 0.01815, 0.01822, 0.01828, 0.01835, 0.01842, 0.01848, 0.01855,
			0.01862, 0.01869, 0.01876, 0.01883, 0.01890, 0.01897, 0.01904, 0.01911, 0.01918, 0.01926,
			0.01933, 0.01940, 0.01948, 0.01955, 0.01963, 0.01970, 0.01978, 0.01986, 0.01994, 0.02002,
			0.02010, 0.02018, 0.02026, 0.02034, 0.02042, 0.02050, 0.02059, 0.02067, 0.02075, 0.02084,
			0.02092, 0.02101, 0.02110, 0.02119, 0.02128, 0.02137, 0.02146, 0.02155, 0.02164, 0.02173,
			0.02183, 0.02192, 0.02202, 0.02211, 0.02221, 0.02231, 0.02240, 0.02250, 0.02260, 0.02271,
			0.02281, 0.02291, 0.02302, 0.02312, 0.02323, 0.02333, 0.02344, 0.02355, 0.02366, 0.02377,
			0.02388, 0.02400, 0.02411, 0.02423, 0.02434, 0.02446, 0.02458, 0.02470, 0.02482, 0.02494,
			0.02506, 0.02519, 0.02531, 0.02544, 0.02557, 0.02570, 0.02583, 0.02596, 0.02610, 0.02623,
			0.02637, 0.02651, 0.02664, 0.02679, 0.02693, 0.02707, 0.02722, 0.02736, 0.02751, 0.02766,
			0.02781, 0.02797, 0.02812, 0.02828, 0.02844, 0.02860, 0.02876, 0.02893, 0.02909, 0.02926,
			0.02943, 0.02960, 0.02977, 0.02995, 0.03013, 0.03031, 0.03049, 0.03068, 0.03086, 0.03105,
			0.03124, 0.03144, 0.03163, 0.03183, 0.03203, 0.03223, 0.03244, 0.03265, 0.03286, 0.03307,
			0.03329, 0.03351, 0.03373, 0.03396, 0.03419, 0.03442, 0.03466, 0.03489, 0.03514, 0.03538,
			0.03563, 0.03588, 0.03614, 0.03639, 0.03666, 0.03692, 0.03719, 0.03747, 0.03775, 0.03803,
			0.03832, 0.03861, 0.03890, 0.03920, 0.03951, 0.03982, 0.04013, 0.04045, 0.04077, 0.04110,
			0.04144, 0.04178, 0.04213, 0.04248, 0.04283, 0.04320, 0.04357, 0.04394, 0.04433, 0.04472, 
			0.04511, 0.04551, 0.04592, 0.04634, 0.04677, 0.04720, 0.04764, 0.04809, 0.04855, 0.04901, 
			0.04949, 0.04997, 0.05047, 0.05097, 0.05148, 0.05201, 0.05254, 0.05309, 0.05365, 0.05421, 
			0.05480, 0.05539, 0.05599, 0.05661, 0.05724, 0.05789, 0.05855, 0.05923, 0.05992, 0.06063, 
			0.06135, 0.06209, 0.06285, 0.06363, 0.06443, 0.06524, 0.06609, 0.06695, 0.06783, 0.06873, 
			0.06966, 0.07061, 0.07159, 0.07259, 0.07363, 0.07469, 0.07578, 0.07690, 0.07805, 0.07924, 
			0.08047, 0.08173, 0.08303, 0.08437, 0.08568, 0.08705, 0.08845, 0.08990, 0.09147, 0.09310, 
			0.09478, 0.09652, 0.09833, 0.10020, 0.10214, 0.10415, 0.10624, 0.10840, 0.11066, 0.11300, 
			0.11544, 0.11798, 0.12063, 0.12340, 0.12628, 0.12929, 0.13244, 0.13573, 0.13917, 0.14279, 
			0.14657, 0.15055, 0.15473, 0.15912, 0.16374, 0.16862, 0.17376, 0.17918, 0.18492, 0.19099, 
			0.19742, 0.20424, 0.21148, 0.21917, 0.22736, 0.23609, 0.24540, 0.25535, 0.26599, 0.27739, 
			0.28960, 0.30272, 0.31681, 0.33198, 0.34833, 0.36596, 0.38499, 0.40556, 0.42781, 0.45190, 
			0.47799, 0.50627, 0.53692, 0.57016, 0.60619, 0.64523, 0.68752, 0.73327, 0.78271, 0.83605, 
			0.89346, 0.95513, 1.02117, 1.09167, 1.16666, 1.24610, 1.32989, 1.41787, 1.50981, 1.60539, 
			1.70427, 1.80605, 1.91030, 2.01659, 2.12447, 2.23353, 2.34338, 2.45369, 2.56417, 2.67456, 
			2.78470, 2.89443, 3.00367, 3.11236, 3.22047, 3.32800, 3.43496, 3.54139, 3.64732, 3.75278, 
			3.85783, 3.96249, 4.06681, 4.17083, 4.27457, 4.37807, 4.48135, 4.58442, 4.68732, 4.79006, 
			4.89265, 4.99511, 5.09744, 5.19967, 5.30179, 5.40381, 5.50575, 5.60760, 5.70938, 5.81108, 
			5.91272, 6.01430, 6.11581, 6.21727, 6.31868, 6.42004, 6.52135, 6.62262, 6.72384, 6.82503, 
			6.92618, 7.02729, 7.12837, 7.22941, 7.33043, 7.43141, 7.53237, 7.63330, 7.73420, 7.83508, 
			7.93593, 8.03676, 8.13757, 8.23836, 8.33913, 8.43988, 8.54061, 8.64132, 8.74202, 8.84270, 
			8.94336, 9.04401, 9.14464, 9.24526, 9.34586, 9.44645, 9.54703, 9.64759, 9.74815, 9.84869,
			9.94922 };
		
		double ZJSD[] = {
			0.01910, 0.01916, 0.01921, 0.01926, 0.01931, 0.01937, 0.01942, 0.01947, 0.01953, 0.01958, 
			0.01963, 0.01969, 0.01974, 0.01980, 0.01985, 0.01991, 0.01997, 0.02002, 0.02008, 0.02014, 
			0.02019, 0.02025, 0.02031, 0.02037, 0.02043, 0.02048, 0.02054, 0.02060, 0.02066, 0.02072, 
			0.02078, 0.02085, 0.02091, 0.02097, 0.02103, 0.02109, 0.02116, 0.02122, 0.02128, 0.02135, 
			0.02141, 0.02148, 0.02154, 0.02161, 0.02167, 0.02174, 0.02181, 0.02187, 0.02194, 0.02201, 
			0.02208, 0.02215, 0.02222, 0.02229, 0.02236, 0.02243, 0.02250, 0.02257, 0.02264, 0.02271, 
			0.02279, 0.02286, 0.02293, 0.02301, 0.02308, 0.02316, 0.02323, 0.02331, 0.02339, 0.02346, 
			0.02354, 0.02362, 0.02370, 0.02378, 0.02386, 0.02394, 0.02402, 0.02410, 0.02418, 0.02427, 
			0.02435, 0.02443, 0.02452, 0.02460, 0.02469, 0.02477, 0.02486, 0.02495, 0.02504, 0.02512, 
			0.02521, 0.02530, 0.02539, 0.02549, 0.02558, 0.02567, 0.02576, 0.02586, 0.02595, 0.02605, 
			0.02614, 0.02624, 0.02634, 0.02643, 0.02653, 0.02663, 0.02673, 0.02683, 0.02694, 0.02704, 
			0.02714, 0.02725, 0.02735, 0.02746, 0.02756, 0.02767, 0.02778, 0.02789, 0.02800, 0.02811, 
			0.02822, 0.02833, 0.02844, 0.02856, 0.02867, 0.02879, 0.02891, 0.02903, 0.02914, 0.02926, 
			0.02939, 0.02951, 0.02963, 0.02975, 0.02988, 0.03001, 0.03013, 0.03026, 0.03039, 0.03052, 
			0.03065, 0.03078, 0.03092, 0.03105, 0.03119, 0.03133, 0.03147, 0.03161, 0.03175, 0.03189, 
			0.03203, 0.03218, 0.03232, 0.03247, 0.03262, 0.03277, 0.03292, 0.03307, 0.03323, 0.03339, 
			0.03354, 0.03370, 0.03386, 0.03402, 0.03419, 0.03435, 0.03452, 0.03469, 0.03486, 0.03503, 
			0.03520, 0.03538, 0.03555, 0.03573, 0.03591, 0.03609, 0.03628, 0.03646, 0.03665, 0.03684, 
			0.03703, 0.03722, 0.03742, 0.03762, 0.03782, 0.03802, 0.03822, 0.03843, 0.03864, 0.03885, 
			0.03906, 0.03928, 0.03949, 0.03971, 0.03993, 0.04016, 0.04039, 0.04062, 0.04085, 0.04108, 
			0.04132, 0.04156, 0.04181, 0.04205, 0.04230, 0.04255, 0.04281, 0.04307, 0.04333, 0.04359, 
			0.04386, 0.04413, 0.04441, 0.04469, 0.04497, 0.04525, 0.04554, 0.04583, 0.04613, 0.04643, 
			0.04673, 0.04704, 0.04735, 0.04766, 0.04798, 0.04831, 0.04864, 0.04897, 0.04931, 0.04965, 
			0.05000, 0.05035, 0.05070, 0.05107, 0.05143, 0.05180, 0.05218, 0.05256, 0.05295, 0.05335, 
			0.05375, 0.05415, 0.05456, 0.05498, 0.05541, 0.05584, 0.05628, 0.05672, 0.05717, 0.05763, 
			0.05810, 0.05857, 0.05905, 0.05954, 0.06004, 0.06054, 0.06106, 0.06158, 0.06211, 0.06265, 
			0.06320, 0.06376, 0.06433, 0.06491, 0.06550, 0.06610, 0.06671, 0.06733, 0.06796, 0.06861, 
			0.06926, 0.06993, 0.07062, 0.07131, 0.07202, 0.07275, 0.07348, 0.07424, 0.07500, 0.07579, 
			0.07659, 0.07740, 0.07824, 0.07909, 0.07996, 0.08085, 0.08175, 0.08268, 0.08363, 0.08460, 
			0.08559, 0.08661, 0.08764, 0.08871, 0.08979, 0.09091, 0.09204, 0.09321, 0.09441, 0.09564, 
			0.09689, 0.09819, 0.09951, 0.10087, 0.10227, 0.10370, 0.10518, 0.10669, 0.10824, 0.10984, 
			0.11149, 0.11318, 0.11493, 0.11672, 0.11854, 0.12043, 0.12238, 0.12438, 0.12647, 0.12863, 
			0.13085, 0.13315, 0.13553, 0.13798, 0.14053, 0.14315, 0.14588, 0.14870, 0.15162, 0.15465, 
			0.15779, 0.16105, 0.16444, 0.16796, 0.17162, 0.17543, 0.17939, 0.18351, 0.18781, 0.19229, 
			0.19697, 0.20185, 0.20694, 0.21227, 0.21784, 0.22367, 0.22977, 0.23617, 0.24287, 0.24990, 
			0.25728, 0.26503, 0.27317, 0.28173, 0.29073, 0.30020, 0.31018, 0.32068, 0.33175, 0.34341, 
			0.35571, 0.36867, 0.38233, 0.39673, 0.41191, 0.42790, 0.44473, 0.46244, 0.48106, 0.50060, 
			0.52108, 0.54251, 0.56489, 0.58819, 0.61238, 0.63741, 0.66320, 0.68964, 0.71661, 0.74395, 
			0.77148, 0.79898, 0.82620, 0.85289, 0.87877, 0.90354, 0.92694, 0.94869, 0.96857, 0.98639, 
			1.00200, 1.01533, 1.02636, 1.03515, 1.04181, 1.04651, 1.04946, 1.05089, 1.05106, 1.05021, 
			1.04859, 1.04642, 1.04389, 1.04115, 1.03835, 1.03558, 1.03291, 1.03039, 1.02805, 1.02591, 
			1.02396, 1.02219, 1.02061, 1.01919, 1.01791, 1.01677, 1.01574, 1.01482, 1.01398, 1.01322, 
			1.01253, 1.01190, 1.01132, 1.01079, 1.01030, 1.00985, 1.00942, 1.00903, 1.00866, 1.00832, 
			1.00800, 1.00770, 1.00741, 1.00714, 1.00689, 1.00665, 1.00643, 1.00621, 1.00601, 1.00582, 
			1.00563, 1.00546, 1.00529, 1.00513, 1.00498, 1.00484, 1.00470, 1.00457, 1.00444, 1.00432, 
			1.00421, 1.00409, 1.00399, 1.00388, 1.00379, 1.00369, 1.00360, 1.00351, 1.00343, 1.00335, 
			1.00327, 1.00319, 1.00312, 1.00305, 1.00298, 1.00292, 1.00285, 1.00279, 1.00273, 1.00267, 
			1.00262 };

		
		double ZF[] = {
			0.09344, 0.09357, 0.09369, 0.09382, 0.09395, 0.09407, 0.09420, 0.09433, 0.09446, 0.09459, 
			0.09472, 0.09485, 0.09498, 0.09511, 0.09524, 0.09538, 0.09551, 0.09564, 0.09578, 0.09591, 
			0.09605, 0.09619, 0.09632, 0.09646, 0.09660, 0.09674, 0.09688, 0.09702, 0.09716, 0.09730, 
			0.09744, 0.09758, 0.09772, 0.09787, 0.09801, 0.09816, 0.09830, 0.09845, 0.09859, 0.09874, 
			0.09889, 0.09904, 0.09919, 0.09934, 0.09949, 0.09964, 0.09979, 0.09994, 0.10010, 0.10025, 
			0.10041, 0.10056, 0.10072, 0.10088, 0.10103, 0.10119, 0.10135, 0.10151, 0.10167, 0.10184, 
			0.10200, 0.10216, 0.10233, 0.10249, 0.10266, 0.10282, 0.10299, 0.10316, 0.10333, 0.10350, 
			0.10367, 0.10384, 0.10401, 0.10418, 0.10436, 0.10453, 0.10471, 0.10489, 0.10506, 0.10524, 
			0.10542, 0.10560, 0.10578, 0.10597, 0.10615, 0.10633, 0.10652, 0.10670, 0.10689, 0.10708, 
			0.10727, 0.10746, 0.10765, 0.10784, 0.10804, 0.10823, 0.10843, 0.10862, 0.10882, 0.10902, 
			0.10922, 0.10942, 0.10962, 0.10982, 0.11003, 0.11023, 0.11044, 0.11065, 0.11086, 0.11107, 
			0.11128, 0.11149, 0.11170, 0.11192, 0.11213, 0.11235, 0.11257, 0.11279, 0.11301, 0.11323, 
			0.11346, 0.11368, 0.11391, 0.11414, 0.11437, 0.11460, 0.11483, 0.11506, 0.11530, 0.11553, 
			0.11577, 0.11601, 0.11625, 0.11649, 0.11674, 0.11698, 0.11723, 0.11748, 0.11773, 0.11798, 
			0.11823, 0.11849, 0.11875, 0.11901, 0.11927, 0.11953, 0.11979, 0.12006, 0.12032, 0.12059, 
			0.12086, 0.12114, 0.12141, 0.12169, 0.12196, 0.12224, 0.12253, 0.12281, 0.12310, 0.12338, 
			0.12367, 0.12397, 0.12426, 0.12456, 0.12486, 0.12516, 0.12546, 0.12576, 0.12607, 0.12638, 
			0.12669, 0.12701, 0.12732, 0.12764, 0.12796, 0.12829, 0.12861, 0.12894, 0.12927, 0.12961, 
			0.12994, 0.13028, 0.13062, 0.13097, 0.13131, 0.13166, 0.13202, 0.13237, 0.13273, 0.13309, 
			0.13346, 0.13382, 0.13420, 0.13457, 0.13495, 0.13533, 0.13571, 0.13609, 0.13648, 0.13688, 
			0.13727, 0.13767, 0.13808, 0.13848, 0.13889, 0.13931, 0.13973, 0.14015, 0.14057, 0.14100, 
			0.14144, 0.14187, 0.14232, 0.14276, 0.14321, 0.14367, 0.14412, 0.14459, 0.14506, 0.14553, 
			0.14600, 0.14649, 0.14697, 0.14746, 0.14796, 0.14846, 0.14897, 0.14948, 0.14999, 0.15052, 
			0.15104, 0.15158, 0.15211, 0.15266, 0.15321, 0.15376, 0.15433, 0.15490, 0.15547, 0.15605, 
			0.15664, 0.15723, 0.15783, 0.15844, 0.15906, 0.15968, 0.16031, 0.16095, 0.16159, 0.16224, 
			0.16290, 0.16357, 0.16425, 0.16493, 0.16563, 0.16633, 0.16704, 0.16776, 0.16849, 0.16923, 
			0.16998, 0.17074, 0.17151, 0.17229, 0.17308, 0.17388, 0.17469, 0.17552, 0.17635, 0.17720, 
			0.17806, 0.17893, 0.17982, 0.18071, 0.18162, 0.18255, 0.18349, 0.18444, 0.18541, 0.18639, 
			0.18739, 0.18841, 0.18944, 0.19049, 0.19155, 0.19264, 0.19374, 0.19486, 0.19600, 0.19716, 
			0.19834, 0.19954, 0.20076, 0.20201, 0.20328, 0.20457, 0.20588, 0.20722, 0.20859, 0.20998, 
			0.21141, 0.21286, 0.21434, 0.21585, 0.21739, 0.21896, 0.22057, 0.22221, 0.22389, 0.22560, 
			0.22736, 0.22916, 0.23099, 0.23287, 0.23458, 0.23640, 0.23824, 0.24013, 0.24225, 0.24443, 
			0.24666, 0.24895, 0.25131, 0.25373, 0.25621, 0.25877, 0.26140, 0.26410, 0.26689, 0.26976, 
			0.27272, 0.27577, 0.27892, 0.28217, 0.28553, 0.28900, 0.29259, 0.29630, 0.30015, 0.30413, 
			0.30826, 0.31255, 0.31700, 0.32163, 0.32644, 0.33145, 0.33666, 0.34210, 0.34777, 0.35369, 
			0.35988, 0.36635, 0.37312, 0.38022, 0.38767, 0.39549, 0.40370, 0.41234, 0.42144, 0.43103, 
			0.44115, 0.45183, 0.46311, 0.47505, 0.48769, 0.50108, 0.51528, 0.53035, 0.54634, 0.56332, 
			0.58137, 0.60054, 0.62092, 0.64256, 0.66554, 0.68993, 0.71578, 0.74314, 0.77207, 0.80257, 
			0.83468, 0.86836, 0.90359, 0.94031, 0.97842, 1.01780, 1.05830, 1.09974, 1.14193, 1.18465, 
			1.22766, 1.27075, 1.31368, 1.35625, 1.39826, 1.43957, 1.48003, 1.51954, 1.55804, 1.59549, 
			1.63188, 1.66722, 1.70153, 1.73485, 1.76725, 1.79876, 1.82946, 1.85939, 1.88862, 1.91719, 
			1.94516, 1.97257, 1.99946, 2.02587, 2.05182, 2.07736, 2.10249, 2.12726, 2.15168, 2.17576, 
			2.19952, 2.22299, 2.24616, 2.26906, 2.29170, 2.31408, 2.33622, 2.35812, 2.37980, 2.40126, 
			2.42251, 2.44355, 2.46439, 2.48505, 2.50551, 2.52580, 2.54591, 2.56584, 2.58562, 2.60523, 
			2.62468, 2.64398, 2.66313, 2.68213, 2.70100, 2.71972, 2.73830, 2.75676, 2.77508, 2.79328, 
			2.81135, 2.82930, 2.84713, 2.86485, 2.88245, 2.89994, 2.91732, 2.93459, 2.95176, 2.96882, 
			2.98578, 3.00264, 3.01941, 3.03608, 3.05265, 3.06913, 3.08552, 3.10182, 3.11803, 3.13416, 
			3.15019  };
		
		double ZFSD[] = {
			0.06993, 0.07003, 0.07012, 0.07022, 0.07031, 0.07041, 0.07050, 0.07060, 0.07070, 0.07080, 
			0.07089, 0.07099, 0.07109, 0.07119, 0.07129, 0.07139, 0.07149, 0.07159, 0.07169, 0.07179, 
			0.07189, 0.07200, 0.07210, 0.07220, 0.07231, 0.07241, 0.07252, 0.07262, 0.07273, 0.07283, 
			0.07294, 0.07305, 0.07315, 0.07326, 0.07337, 0.07348, 0.07359, 0.07370, 0.07381, 0.07392, 
			0.07403, 0.07414, 0.07425, 0.07437, 0.07448, 0.07459, 0.07471, 0.07482, 0.07494, 0.07506, 
			0.07517, 0.07529, 0.07541, 0.07552, 0.07564, 0.07576, 0.07588, 0.07600, 0.07612, 0.07625, 
			0.07637, 0.07649, 0.07661, 0.07674, 0.07686, 0.07699, 0.07711, 0.07724, 0.07737, 0.07750, 
			0.07762, 0.07775, 0.07788, 0.07801, 0.07814, 0.07828, 0.07841, 0.07854, 0.07867, 0.07881, 
			0.07894, 0.07908, 0.07922, 0.07935, 0.07949, 0.07963, 0.07977, 0.07991, 0.08005, 0.08019, 
			0.08033, 0.08048, 0.08062, 0.08076, 0.08091, 0.08106, 0.08120, 0.08135, 0.08150, 0.08165, 
			0.08180, 0.08195, 0.08210, 0.08225, 0.08241, 0.08256, 0.08272, 0.08287, 0.08303, 0.08319, 
			0.08335, 0.08351, 0.08367, 0.08383, 0.08399, 0.08416, 0.08432, 0.08449, 0.08465, 0.08482, 
			0.08499, 0.08516, 0.08533, 0.08550, 0.08567, 0.08585, 0.08602, 0.08620, 0.08637, 0.08655, 
			0.08673, 0.08691, 0.08709, 0.08727, 0.08746, 0.08764, 0.08783, 0.08801, 0.08820, 0.08839, 
			0.08858, 0.08877, 0.08897, 0.08916, 0.08936, 0.08955, 0.08975, 0.08995, 0.09015, 0.09035, 
			0.09056, 0.09076, 0.09097, 0.09117, 0.09138, 0.09159, 0.09181, 0.09202, 0.09223, 0.09245, 
			0.09267, 0.09289, 0.09311, 0.09333, 0.09356, 0.09378, 0.09401, 0.09424, 0.09447, 0.09470, 
			0.09494, 0.09517, 0.09541, 0.09565, 0.09589, 0.09614, 0.09638, 0.09663, 0.09688, 0.09713, 
			0.09738, 0.09763, 0.09789, 0.09815, 0.09841, 0.09867, 0.09894, 0.09920, 0.09947, 0.09974, 
			0.10002, 0.10029, 0.10057, 0.10085, 0.10114, 0.10142, 0.10171, 0.10200, 0.10229, 0.10259, 
			0.10288, 0.10318, 0.10349, 0.10379, 0.10410, 0.10441, 0.10472, 0.10504, 0.10536, 0.10568, 
			0.10601, 0.10633, 0.10667, 0.10700, 0.10734, 0.10768, 0.10802, 0.10837, 0.10872, 0.10907, 
			0.10943, 0.10979, 0.11015, 0.11052, 0.11089, 0.11127, 0.11165, 0.11203, 0.11242, 0.11281, 
			0.11320, 0.11360, 0.11400, 0.11441, 0.11482, 0.11524, 0.11566, 0.11609, 0.11652, 0.11695, 
			0.11739, 0.11783, 0.11828, 0.11874, 0.11920, 0.11966, 0.12013, 0.12061, 0.12109, 0.12158, 
			0.12207, 0.12257, 0.12307, 0.12359, 0.12410, 0.12463, 0.12516, 0.12569, 0.12624, 0.12679, 
			0.12735, 0.12791, 0.12849, 0.12907, 0.12966, 0.13025, 0.13086, 0.13147, 0.13209, 0.13272, 
			0.13336, 0.13401, 0.13466, 0.13533, 0.13601, 0.13669, 0.13739, 0.13810, 0.13881, 0.13954, 
			0.14028, 0.14103, 0.14180, 0.14257, 0.14336, 0.14416, 0.14498, 0.14580, 0.14664, 0.14750, 
			0.14837, 0.14925, 0.15015, 0.15107, 0.15200, 0.15295, 0.15396, 0.15495, 0.15595, 0.15697, 
			0.15801, 0.15907, 0.16016, 0.16126, 0.16238, 0.16353, 0.16470, 0.16590, 0.16712, 0.16836, 
			0.16964, 0.17093, 0.17226, 0.17362, 0.17507, 0.17654, 0.17801, 0.17956, 0.18107, 0.18263, 
			0.18422, 0.18586, 0.18754, 0.18926, 0.19103, 0.19284, 0.19470, 0.19661, 0.19857, 0.20058, 
			0.20265, 0.20478, 0.20697, 0.20923, 0.21155, 0.21394, 0.21640, 0.21894, 0.22156, 0.22425, 
			0.22704, 0.22991, 0.23288, 0.23595, 0.23912, 0.24240, 0.24579, 0.24930, 0.25293, 0.25669, 
			0.26059, 0.26462, 0.26880, 0.27314, 0.27763, 0.28228, 0.28710, 0.29210, 0.29728, 0.30265, 
			0.30821, 0.31396, 0.31991, 0.32605, 0.33240, 0.33893, 0.34565, 0.35255, 0.35962, 0.36683, 
			0.37417, 0.38159, 0.38908, 0.39658, 0.40403, 0.41138, 0.41855, 0.42546, 0.43200, 0.43809, 
			0.44360, 0.44842, 0.45243, 0.45551, 0.45756, 0.45846, 0.45814, 0.45655, 0.45364, 0.44944, 
			0.44397, 0.43732, 0.42959, 0.42092, 0.41149, 0.40146, 0.39103, 0.38038, 0.36969, 0.35912, 
			0.34880, 0.33886, 0.32936, 0.32037, 0.31193, 0.30405, 0.29671, 0.28990, 0.28360, 0.27776, 
			0.27234, 0.26731, 0.26263, 0.25826, 0.25417, 0.25032, 0.24670, 0.24327, 0.24002, 0.23693, 
			0.23398, 0.23116, 0.22846, 0.22587, 0.22338, 0.22099, 0.21868, 0.21645, 0.21429, 0.21221, 
			0.21019, 0.20824, 0.20634, 0.20450, 0.20271, 0.20097, 0.19928, 0.19764, 0.19603, 0.19447, 
			0.19295, 0.19146, 0.19001, 0.18860, 0.18722, 0.18587, 0.18455, 0.18326, 0.18200, 0.18076, 
			0.17955, 0.17837, 0.17721, 0.17607, 0.17496, 0.17386, 0.17279, 0.17174, 0.17071, 0.16970, 
			0.16870, 0.16773, 0.16677, 0.16582, 0.16490, 0.16399, 0.16309, 0.16221, 0.16135, 0.16050, 
			0.15966  };
		
#ifndef USE_TABLES
		
		const double LIMIT_L(-22.0);
		const double LIMIT_IS(-3.7);
		const double LIMIT_U(20.0);
		
		J = sigJ = F = sigF = clipper::Util::nan();
		
		double h = I/sigma - 0.5*sigma/S;
		if (I/sigma < LIMIT_IS || h < LIMIT_L ) {
			nrej++;
			if (debug) printf("unphys: %f %f %f\n",I,sigma,I/sigma);
			return(0);
		} else {
			if ( clipper::Util::is_nan(h) ) {
				return(0);
			} else {
				if (h > LIMIT_U) {
					double e2 = 1.0/(h*h);
					double e4 = e2*e2;
					double e6 = e2*e4;
					double c1 = (1.0 - 0.375*e2 - 87.0/128.0*e4 - 2889.0/1024.0*e6)*sqrt(h);
					double c2 = sqrt((273.0/128.0*e6 + 15.0/32.0*e4 + 0.25*e2)*h);
					
					J = h*sigma*(1.0 - 0.5*e2 - 0.75*e4 - 3.0*e6);
					sigJ = 2.0*sigma*c1*c2;
					F = c1*sqrt(sigma);
					sigF = c2*sqrt(sigma);
				} else {
					double x = -h;
					double moment[5];
					double ep = std::exp(-0.25*h*h);
					//moment[0] = std::sqrt(std::pow(2.0,-0.5)/clipper::Util::pi() )*std::pow(2.0,-0.25)*tgamma(1.0)*ep*ctruncate::Utils::pbdv(-0.5,x);
					//moment[1] = std::sqrt(std::pow(2.0,0.0)/clipper::Util::pi() )*std::pow(2.0,-0.50)*tgamma(1.5)*ep*ctruncate::Utils::pbdv(-1.0,x);
					//moment[2] = std::sqrt(std::pow(2.0,0.5)/clipper::Util::pi() )*std::pow(2.0,-0.75)*tgamma(2.0)*ep*ctruncate::Utils::pbdv(-1.5,x);
					//moment[4] = std::sqrt(std::pow(2.0,1.5)/clipper::Util::pi() )*std::pow(2.0,-1.25)*tgamma(3.0)*ep*ctruncate::Utils::pbdv(-2.5,x);					
					for (int i=-1 ; i != 4 ; ++i ) {
						double mu = 0.5*double(i);
						double a = -mu-1.0;
						moment[i+1] = std::sqrt(std::pow(2.0,mu)/clipper::Util::pi() )*std::pow(2.0,-(mu+1.0)/2.0)*tgamma(mu+1.0)*ep*ctruncate::Utils::pbdv(a,x);
					}
					J = moment[2]/moment[0]*sigma;
					sigJ = std::sqrt(moment[4]/moment[0] - std::pow(moment[2],2)/std::pow(moment[0],2))*sigma;
					F = moment[1]/moment[0]*sqrt(sigma);
					sigF = std::sqrt((moment[2]/moment[0]) - std::pow(moment[1],2)/std::pow(moment[0],2))*sqrt(sigma);
				}
			}
			return(1);
		}
#else
			float h,x,delta;
			float c1,c2,e2,e4,e6;
			int n;
			const float LIMIT_U(5.0);
			const float LIMIT_L(-37.0);
			const float LIMIT_IS(-3.7);
			// Bayesian statistics tells us to modify I/sigma by subtracting off sigma/2S
			// where S is the mean intensity in the resolution shell
			h = I/sigma - 0.5*sigma/S;
			// reject as unphysical reflections for which I < -3.7 sigma, or h < -37.0
			if (I/sigma < LIMIT_IS || h < LIMIT_L ) {
				nrej++;
				if (debug) printf("unphys: %f %f %f %f\n",I,sigma,S,h);
				return(0);
			} else {
				if (h < LIMIT_U) {
					// use look up table if -37.0 < h < 5.0
					x = 10.0*(h-LIMIT_L);
					n = int(x);
					delta = x-n;
					// linear interpolation
					J = (1.0-delta)*ZJ[n] + delta*ZJ[n+1];
					sigJ = (1.0-delta)*ZJSD[n] + delta*ZJSD[n+1];
					F = (1.0-delta)*ZF[n] + delta*ZF[n+1];
					sigF = (1.0-delta)*ZFSD[n] + delta*ZFSD[n+1];
					// look up table gives J/sigma, so multiply by sigma to get output intensity
					J *= sigma;
					sigJ *= sigma;
					F *= sqrt(sigma);
					sigF *= sqrt(sigma);
				} else {
					// if h > 5.0 use asymptotic formulas in French and Wilson Appendix, with extra term
					e2 = 1.0/(h*h);
					e4 = e2*e2;
					e6 = e2*e4;
					c1 = (1.0 - 0.375*e2 - 87.0/128.0*e4 - 2889.0/1024.0*e6)*sqrt(h);
					c2 = sqrt((273.0/128.0*e6 + 15.0/32.0*e4 + 0.25*e2)*h);
					
					J = h*sigma*(1.0 - 0.5*e2 - 0.75*e4 - 3.0*e6);
					sigJ = 2.0*sigma*c1*c2;
					F = c1*sqrt(sigma);
					sigF = c2*sqrt(sigma);
				}
				return(1);
			}
#endif
		}
		
	int truncate(clipper::HKL_data<clipper::data32::I_sigI>& isig, clipper::HKL_data<clipper::data32::I_sigI>& jsig, 
				 clipper::HKL_data<clipper::data32::F_sigF>& fsig, clipper::ResolutionFn& Sigma, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		//FILE *checkfile;
		//checkfile = fopen("checku.txt", "w");
		float J, sigJ, F, sigF;
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !isig[ih].missing() || ih.invresolsq() <=  reso.invresolsq_limit() ) {
				float I = isig[ih].I();
				float sigma = isig[ih].sigI();
				float S = Sigma.f(ih);
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				// handle acentric and centric reflections separately
				if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
				else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
				//if ( !ih.hkl_class().centric()  && I < 0 ) 
				//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
				//ih.hkl_class().epsilon());
				if (iflag != 0) {
					jsig[ih].I() = J*weight;
					jsig[ih].sigI() = sigJ*weight;
					fsig[ih].f() = F*scalef*sqwt;
					fsig[ih].sigf() = sigF*scalef*sqwt;
					//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
				} else {
					jsig[ih].I() = clipper::Util::nan();
					jsig[ih].sigI() = clipper::Util::nan();
					fsig[ih].f() = clipper::Util::nan();
					fsig[ih].sigf() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I() = clipper::Util::nan();
				jsig[ih].sigI() = clipper::Util::nan();
				fsig[ih].f() = clipper::Util::nan();
				fsig[ih].sigf() = clipper::Util::nan();
			}
		}
		//fclose(checkfile);
		return(1);
	}
	
	
	int truncate(clipper::HKL_data<clipper::data32::J_sigJ_ano>& isig, clipper::HKL_data<clipper::data32::J_sigJ_ano>& jsig,
				 clipper::HKL_data<clipper::data32::G_sigG_ano>& fsig, clipper::ResolutionFn& Sigma, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	
	// takes anomalous I's as input. 
	
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		//FILE *checkfile;
		//checkfile = fopen("checku.txt", "w");
		float J, sigJ, F, sigF;
                float invr2 = reso.invresolsq_limit();
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !clipper::Util::is_nan(isig[ih].I_pl() ) ) {
				float I = isig[ih].I_pl();
				float sigma = isig[ih].sigI_pl();
				float S = Sigma.f(ih);
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				// handle acentric and centric reflections separately
				if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
				else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
				//if ( !ih.hkl_class().centric()  && I < 0 ) 
				//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
				//ih.hkl_class().epsilon());
				if (iflag) {
					jsig[ih].I_pl() = J*weight;
					jsig[ih].sigI_pl() = sigJ*weight;
					//jsig[ih] = datatypes::I_sigI_ano<float>( J, sigJ );
					fsig[ih].f_pl() = F*scalef*sqwt;
					fsig[ih].sigf_pl() = sigF*scalef*sqwt;
					//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
				} else {
					jsig[ih].I_pl() = clipper::Util::nan();
					jsig[ih].sigI_pl() = clipper::Util::nan();
					fsig[ih].f_pl() = clipper::Util::nan();
					fsig[ih].sigf_pl() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_pl() = clipper::Util::nan();
				jsig[ih].sigI_pl() = clipper::Util::nan();
				fsig[ih].f_pl() = clipper::Util::nan();
				fsig[ih].sigf_pl() = clipper::Util::nan();
			}
			
			if ( !clipper::Util::is_nan(isig[ih].I_mi() ) ) {
				float I = isig[ih].I_mi();
				float sigma = isig[ih].sigI_mi();
				float S = Sigma.f(ih);
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				// handle acentric and centric reflections separately
				if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
				else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
				//if ( !ih.hkl_class().centric()  && I < 0 ) 
				//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
				//ih.hkl_class().epsilon());
				if (iflag) {
					jsig[ih].I_mi() = J*weight;
					jsig[ih].sigI_mi() = sigJ*weight;
					//jsig[ih] = datatypes::I_sigI_ano<float>( J, sigJ );
					fsig[ih].f_mi() = F*scalef*sqwt;
					fsig[ih].sigf_mi() = sigF*scalef*sqwt;
					//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
				} else {
					jsig[ih].I_mi() = clipper::Util::nan();
					jsig[ih].sigI_mi() = clipper::Util::nan();
					fsig[ih].f_mi() = clipper::Util::nan();
					fsig[ih].sigf_mi() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_mi() = clipper::Util::nan();
				jsig[ih].sigI_mi() = clipper::Util::nan();
				fsig[ih].f_mi() = clipper::Util::nan();
				fsig[ih].sigf_mi() = clipper::Util::nan();
			}
		}
		//fclose(checkfile);
		return(1);
	}
	
	int truncate(clipper::HKL_data<clipper::data32::I_sigI>& isig, clipper::HKL_data<clipper::data32::I_sigI>& jsig, 
				 clipper::HKL_data<clipper::data32::F_sigF>& fsig, clipper::HKL_data<clipper::data32::I_sigI>& Sigma, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		//FILE *checkfile;
		//checkfile = fopen("checku.txt", "w");
		float J, sigJ, F, sigF;
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !isig[ih].missing() || ih.invresolsq() <=  reso.invresolsq_limit() ) {
				float I = isig[ih].I();
				float sigma = isig[ih].sigI();
				float S = Sigma[ih].I();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				// handle acentric and centric reflections separately
				if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
				else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
				//if ( !ih.hkl_class().centric()  && I < 0 ) 
				//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
				//ih.hkl_class().epsilon());
				if (iflag) {
					jsig[ih].I() = J*weight;
					jsig[ih].sigI() = sigJ*weight;
					fsig[ih].f() = F*scalef*sqwt;
					fsig[ih].sigf() = sigF*scalef*sqwt;
					//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
				} else {
					jsig[ih].I() = clipper::Util::nan();
					jsig[ih].sigI() = clipper::Util::nan();
					fsig[ih].f() = clipper::Util::nan();
					fsig[ih].sigf() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I() = clipper::Util::nan();
				jsig[ih].sigI() = clipper::Util::nan();
				fsig[ih].f() = clipper::Util::nan();
				fsig[ih].sigf() = clipper::Util::nan();
			}
		}
		//fclose(checkfile);
		return(1);
	}
	
	
	int truncate(clipper::HKL_data<clipper::data32::J_sigJ_ano>& isig, clipper::HKL_data<clipper::data32::J_sigJ_ano>& jsig,
				 clipper::HKL_data<clipper::data32::G_sigG_ano>& fsig, clipper::HKL_data<clipper::data32::I_sigI>& Sigma, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	
	// takes anomalous I's as input. 
	
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		//FILE *checkfile;
		//checkfile = fopen("checku.txt", "w");
		float J, sigJ, F, sigF;
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( ih.invresolsq() <=  reso.invresolsq_limit() ) {
				if ( !clipper::Util::is_nan(isig[ih].I_pl() ) ) {
					float I = isig[ih].I_pl();
					float sigma = isig[ih].sigI_pl();
					float S = Sigma[ih].I();
					clipper::HKL hkl = ih.hkl();
					float weight(ih.hkl_class().epsilon() );
					float sqwt = sqrt(weight);
					
					I /= weight;
					sigma /= weight;
					
					// handle acentric and centric reflections separately
					if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
					else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
					//if ( !ih.hkl_class().centric()  && I < 0 ) 
					//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
					//ih.hkl_class().epsilon());
					if (iflag) {
						jsig[ih].I_pl() = J*weight;
						jsig[ih].sigI_pl() = sigJ*weight;
						//jsig[ih] = datatypes::I_sigI_ano<float>( J, sigJ );
						fsig[ih].f_pl() = F*scalef*sqwt;
						fsig[ih].sigf_pl() = sigF*scalef*sqwt;
						//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
					} else {
						jsig[ih].I_pl() = clipper::Util::nan();
						jsig[ih].sigI_pl() = clipper::Util::nan();
						fsig[ih].f_pl() = clipper::Util::nan();
						fsig[ih].sigf_pl() = clipper::Util::nan();
					}
				} else {
					jsig[ih].I_pl() = clipper::Util::nan();
					jsig[ih].sigI_pl() = clipper::Util::nan();
					fsig[ih].f_pl() = clipper::Util::nan();
					fsig[ih].sigf_pl() = clipper::Util::nan();
				}
				
				if ( !clipper::Util::is_nan(isig[ih].I_mi() ) ) {
					float I = isig[ih].I_mi();
					float sigma = isig[ih].sigI_mi();
					float S = Sigma[ih].I();
					clipper::HKL hkl = ih.hkl();
					float weight(ih.hkl_class().epsilon() );
					float sqwt = sqrt(weight);
					
					I /= weight;
					sigma /= weight;
					
					// handle acentric and centric reflections separately
					if ( ih.hkl_class().centric() ) iflag = truncate_centric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);
					else iflag = truncate_acentric(I, sigma, S, J, sigJ, F, sigF, nrej, debug);	
					//if ( !ih.hkl_class().centric()  && I < 0 ) 
					//fprintf(checkfile,"%12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %12.6f %8.4f %8.4f %8.4f\n", I,sigma,S,J,sigJ,F,sigF,weight,
					//ih.hkl_class().epsilon());
					if (iflag) {
						jsig[ih].I_mi() = J*weight;
						jsig[ih].sigI_mi() = sigJ*weight;
						//jsig[ih] = datatypes::I_sigI_ano<float>( J, sigJ );
						fsig[ih].f_mi() = F*scalef*sqwt;
						fsig[ih].sigf_mi() = sigF*scalef*sqwt;
						//fprintf(checkfile,"%12.6f %12.6f %12.6f\n", I,fsig[ih].f(),fsig[ih].sigf());
					} else {
						jsig[ih].I_mi() = clipper::Util::nan();
						jsig[ih].sigI_mi() = clipper::Util::nan();
						fsig[ih].f_mi() = clipper::Util::nan();
						fsig[ih].sigf_mi() = clipper::Util::nan();
					}
				} else {
					jsig[ih].I_mi() = clipper::Util::nan();
					jsig[ih].sigI_mi() = clipper::Util::nan();
					fsig[ih].f_mi() = clipper::Util::nan();
					fsig[ih].sigf_mi() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_pl() = clipper::Util::nan();
				jsig[ih].sigI_pl() = clipper::Util::nan();
				fsig[ih].f_pl() = clipper::Util::nan();
				fsig[ih].sigf_pl() = clipper::Util::nan();
				jsig[ih].I_mi() = clipper::Util::nan();
				jsig[ih].sigI_mi() = clipper::Util::nan();
				fsig[ih].f_mi() = clipper::Util::nan();
				fsig[ih].sigf_mi() = clipper::Util::nan();
			}
		}
		//fclose(checkfile);
		return(1);
	}
    
	// flat prior should be the same as acentric wilson (normal function) without the correction for Sigma
	int truncate_flat(float I, float sigma, float& J, float& sigJ, float& F, float& sigF, int& nrej, bool debug)
	{
		// look up tables calculated using quadpack
		// tables give values from h = -4.0 to h = 10.0 in steps of 0.1
		// declare as doubles for now, to avoid compiler warnings  
		
		double ZJ[] = {
			0.02699, 0.02706, 0.02713, 0.02721, 0.02728, 0.02736, 0.02743, 0.02751, 0.02758, 0.02766, 
			0.02774, 0.02781, 0.02789, 0.02797, 0.02805, 0.02812, 0.02820, 0.02828, 0.02836, 0.02844, 
			0.02852, 0.02861, 0.02869, 0.02877, 0.02885, 0.02894, 0.02902, 0.02911, 0.02919, 0.02928, 
			0.02936, 0.02945, 0.02953, 0.02962, 0.02971, 0.02980, 0.02989, 0.02998, 0.03007, 0.03016, 
			0.03025, 0.03034, 0.03043, 0.03052, 0.03062, 0.03071, 0.03081, 0.03090, 0.03100, 0.03109, 
			0.03119, 0.03129, 0.03138, 0.03148, 0.03158, 0.03168, 0.03178, 0.03188, 0.03199, 0.03209, 
			0.03219, 0.03230, 0.03240, 0.03250, 0.03261, 0.03272, 0.03282, 0.03293, 0.03304, 0.03315, 
			0.03326, 0.03337, 0.03348, 0.03359, 0.03371, 0.03382, 0.03394, 0.03405, 0.03417, 0.03428, 
			0.03440, 0.03452, 0.03464, 0.03476, 0.03488, 0.03500, 0.03512, 0.03525, 0.03537, 0.03550, 
			0.03562, 0.03575, 0.03588, 0.03601, 0.03614, 0.03627, 0.03640, 0.03653, 0.03667, 0.03680, 
			0.03694, 0.03707, 0.03721, 0.03735, 0.03749, 0.03763, 0.03777, 0.03791, 0.03806, 0.03820, 
			0.03835, 0.03850, 0.03864, 0.03879, 0.03894, 0.03910, 0.03925, 0.03940, 0.03956, 0.03972, 
			0.03987, 0.04003, 0.04019, 0.04035, 0.04052, 0.04068, 0.04085, 0.04101, 0.04118, 0.04135, 
			0.04152, 0.04170, 0.04187, 0.04205, 0.04222, 0.04240, 0.04258, 0.04276, 0.04294, 0.04313, 
			0.04332, 0.04350, 0.04369, 0.04388, 0.04408, 0.04427, 0.04447, 0.04466, 0.04486, 0.04507, 
			0.04527, 0.04547, 0.04568, 0.04589, 0.04610, 0.04631, 0.04653, 0.04674, 0.04696, 0.04718, 
			0.04741, 0.04763, 0.04786, 0.04809, 0.04832, 0.04855, 0.04879, 0.04902, 0.04927, 0.04951, 
			0.04975, 0.05000, 0.05025, 0.05050, 0.05076, 0.05102, 0.05128, 0.05154, 0.05180, 0.05207, 
			0.05234, 0.05262, 0.05289, 0.05317, 0.05346, 0.05374, 0.05403, 0.05432, 0.05462, 0.05492, 
			0.05522, 0.05552, 0.05583, 0.05614, 0.05646, 0.05678, 0.05710, 0.05742, 0.05775, 0.05809, 
			0.05842, 0.05876, 0.05911, 0.05946, 0.05981, 0.06017, 0.06053, 0.06090, 0.06127, 0.06164, 
			0.06202, 0.06241, 0.06279, 0.06319, 0.06359, 0.06399, 0.06440, 0.06481, 0.06523, 0.06566, 
			0.06609, 0.06652, 0.06696, 0.06741, 0.06787, 0.06832, 0.06879, 0.06926, 0.06974, 0.07023, 
			0.07072, 0.07122, 0.07172, 0.07223, 0.07276, 0.07328, 0.07382, 0.07436, 0.07491, 0.07547, 
			0.07604, 0.07661, 0.07720, 0.07779, 0.07840, 0.07901, 0.07963, 0.08026, 0.08090, 0.08155, 
			0.08221, 0.08289, 0.08357, 0.08426, 0.08497, 0.08569, 0.08642, 0.08716, 0.08792, 0.08868, 
			0.08947, 0.09026, 0.09107, 0.09189, 0.09273, 0.09358, 0.09445, 0.09534, 0.09624, 0.09716, 
			0.09809, 0.09905, 0.10002, 0.10101, 0.10202, 0.10305, 0.10410, 0.10517, 0.10627, 0.10738, 
			0.10852, 0.10969, 0.11087, 0.11209, 0.11333, 0.11460, 0.11589, 0.11721, 0.11857, 0.11995, 
			0.12137, 0.12282, 0.12430, 0.12582, 0.12737, 0.12897, 0.13060, 0.13227, 0.13398, 0.13574, 
			0.13755, 0.13940, 0.14129, 0.14324, 0.14525, 0.14730, 0.14941, 0.15159, 0.15382, 0.15612, 
			0.15848, 0.16092, 0.16342, 0.16601, 0.16867, 0.17141, 0.17424, 0.17716, 0.18017, 0.18329, 
			0.18650, 0.18983, 0.19327, 0.19682, 0.20051, 0.20432, 0.20827, 0.21237, 0.21662, 0.22103, 
			0.22561, 0.23037, 0.23531, 0.24046, 0.24581, 0.25139, 0.25720, 0.26327, 0.26959, 0.27620, 
			0.28310, 0.29032, 0.29787, 0.30577, 0.31406, 0.32274, 0.33186, 0.34143, 0.35150, 0.36208, 
			0.37322, 0.38495, 0.39731, 0.41036, 0.42413, 0.43868, 0.45406, 0.47033, 0.48755, 0.50580, 
			0.52514, 0.54564, 0.56740, 0.59050, 0.61503, 0.64108, 0.66876, 0.69817, 0.72942, 0.76262, 
			0.79788, 0.83533, 0.87507, 0.91722, 0.96188, 1.00916, 1.05915, 1.11192, 1.16756, 1.22611, 
			1.28760, 1.35205, 1.41944, 1.48974, 1.56288, 1.63879, 1.71735, 1.79844, 1.88189, 1.96756, 
			2.05525, 2.14478, 2.23597, 2.32863, 2.42258, 2.51764, 2.61365, 2.71046, 2.80794, 2.90596, 
			3.00444, 3.10327, 3.20239, 3.30172, 3.40123, 3.50087, 3.60061, 3.70042, 3.80029, 3.90020, 
			4.00013, 4.10009, 4.20006, 4.30004, 4.40002, 4.50002, 4.60001, 4.70001, 4.80000, 4.90000, 
			5.00000, 5.10000, 5.20000, 5.30000, 5.40000, 5.50000, 5.60000, 5.70000, 5.80000, 5.90000, 
			6.00000, 6.10000, 6.20000, 6.30000, 6.40000, 6.50000, 6.60000, 6.70000, 6.80000, 6.90000, 
			7.00000, 7.10000, 7.20000, 7.30000, 7.40000, 7.50000, 7.60000, 7.70000, 7.80000, 7.90000, 
			8.00000, 8.10000, 8.20000, 8.30000, 8.40000, 8.50000, 8.60000, 8.70000, 8.80000, 8.90000, 
			9.00000, 9.10000, 9.20000, 9.30000, 9.40000, 9.50000, 9.60000, 9.70000, 9.80000, 9.90000, 
			10.00000 };
		
		double ZJSD[] = {
			0.02697, 0.02704, 0.02711, 0.02719, 0.02726, 0.02734, 0.02741, 0.02749, 0.02756, 0.02764, 
			0.02771, 0.02779, 0.02787, 0.02795, 0.02802, 0.02810, 0.02818, 0.02826, 0.02834, 0.02842, 
			0.02850, 0.02858, 0.02866, 0.02875, 0.02883, 0.02891, 0.02900, 0.02908, 0.02917, 0.02925, 
			0.02934, 0.02942, 0.02951, 0.02960, 0.02968, 0.02977, 0.02986, 0.02995, 0.03004, 0.03013, 
			0.03022, 0.03031, 0.03040, 0.03050, 0.03059, 0.03068, 0.03078, 0.03087, 0.03097, 0.03106, 
			0.03116, 0.03126, 0.03135, 0.03145, 0.03155, 0.03165, 0.03175, 0.03185, 0.03195, 0.03206, 
			0.03216, 0.03226, 0.03237, 0.03247, 0.03258, 0.03268, 0.03279, 0.03290, 0.03300, 0.03311, 
			0.03322, 0.03333, 0.03344, 0.03356, 0.03367, 0.03378, 0.03390, 0.03401, 0.03413, 0.03424, 
			0.03436, 0.03448, 0.03460, 0.03472, 0.03484, 0.03496, 0.03508, 0.03520, 0.03533, 0.03545, 
			0.03558, 0.03571, 0.03583, 0.03596, 0.03609, 0.03622, 0.03635, 0.03648, 0.03662, 0.03675, 
			0.03689, 0.03702, 0.03716, 0.03730, 0.03744, 0.03758, 0.03772, 0.03786, 0.03800, 0.03815, 
			0.03829, 0.03844, 0.03859, 0.03874, 0.03889, 0.03904, 0.03919, 0.03934, 0.03950, 0.03965, 
			0.03981, 0.03997, 0.04013, 0.04029, 0.04045, 0.04061, 0.04078, 0.04095, 0.04111, 0.04128, 
			0.04145, 0.04162, 0.04180, 0.04197, 0.04215, 0.04232, 0.04250, 0.04268, 0.04287, 0.04305, 
			0.04323, 0.04342, 0.04361, 0.04380, 0.04399, 0.04418, 0.04438, 0.04458, 0.04477, 0.04497, 
			0.04518, 0.04538, 0.04559, 0.04579, 0.04600, 0.04621, 0.04643, 0.04664, 0.04686, 0.04708, 
			0.04730, 0.04752, 0.04775, 0.04798, 0.04821, 0.04844, 0.04867, 0.04891, 0.04915, 0.04939, 
			0.04963, 0.04988, 0.05013, 0.05038, 0.05063, 0.05088, 0.05114, 0.05140, 0.05167, 0.05193, 
			0.05220, 0.05247, 0.05275, 0.05303, 0.05331, 0.05359, 0.05388, 0.05417, 0.05446, 0.05475, 
			0.05505, 0.05535, 0.05566, 0.05597, 0.05628, 0.05660, 0.05691, 0.05724, 0.05756, 0.05789, 
			0.05823, 0.05856, 0.05891, 0.05925, 0.05960, 0.05995, 0.06031, 0.06067, 0.06104, 0.06141, 
			0.06179, 0.06217, 0.06255, 0.06294, 0.06333, 0.06373, 0.06414, 0.06455, 0.06496, 0.06538, 
			0.06580, 0.06623, 0.06667, 0.06711, 0.06756, 0.06801, 0.06847, 0.06894, 0.06941, 0.06989, 
			0.07037, 0.07086, 0.07136, 0.07187, 0.07238, 0.07290, 0.07343, 0.07396, 0.07450, 0.07505, 
			0.07561, 0.07618, 0.07675, 0.07733, 0.07793, 0.07853, 0.07914, 0.07976, 0.08039, 0.08103, 
			0.08167, 0.08233, 0.08300, 0.08368, 0.08438, 0.08508, 0.08579, 0.08652, 0.08726, 0.08801, 
			0.08877, 0.08955, 0.09034, 0.09114, 0.09196, 0.09279, 0.09364, 0.09450, 0.09538, 0.09628, 
			0.09719, 0.09811, 0.09906, 0.10002, 0.10100, 0.10200, 0.10302, 0.10406, 0.10512, 0.10620, 
			0.10731, 0.10843, 0.10958, 0.11075, 0.11195, 0.11317, 0.11442, 0.11569, 0.11700, 0.11833, 
			0.11969, 0.12108, 0.12250, 0.12395, 0.12544, 0.12696, 0.12852, 0.13012, 0.13175, 0.13342, 
			0.13514, 0.13689, 0.13869, 0.14054, 0.14243, 0.14437, 0.14636, 0.14841, 0.15051, 0.15266, 
			0.15488, 0.15716, 0.15949, 0.16190, 0.16437, 0.16692, 0.16954, 0.17223, 0.17501, 0.17787, 
			0.18082, 0.18386, 0.18700, 0.19023, 0.19357, 0.19701, 0.20057, 0.20425, 0.20805, 0.21198, 
			0.21604, 0.22024, 0.22459, 0.22910, 0.23377, 0.23861, 0.24362, 0.24882, 0.25422, 0.25982, 
			0.26563, 0.27167, 0.27794, 0.28446, 0.29124, 0.29828, 0.30562, 0.31324, 0.32118, 0.32945, 
			0.33805, 0.34701, 0.35634, 0.36606, 0.37618, 0.38671, 0.39768, 0.40910, 0.42099, 0.43335, 
			0.44620, 0.45956, 0.47343, 0.48781, 0.50272, 0.51815, 0.53410, 0.55056, 0.56751, 0.58494, 
			0.60281, 0.62109, 0.63974, 0.65869, 0.67789, 0.69726, 0.71673, 0.73619, 0.75555, 0.77470, 
			0.79353, 0.81192, 0.82977, 0.84696, 0.86339, 0.87895, 0.89357, 0.90718, 0.91972, 0.93117, 
			0.94152, 0.95076, 0.95894, 0.96609, 0.97226, 0.97755, 0.98200, 0.98573, 0.98880, 0.99130, 
			0.99331, 0.99491, 0.99617, 0.99715, 0.99790, 0.99847, 0.99890, 0.99921, 0.99945, 0.99961, 
			0.99973, 0.99982, 0.99988, 0.99992, 0.99995, 0.99996, 0.99998, 0.99999, 0.99999, 0.99999, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 
			1.00000  };
		
		double ZF[] = {
			0.14578, 0.14598, 0.14617, 0.14637, 0.14657, 0.14677, 0.14697, 0.14717, 0.14737, 0.14758, 
			0.14778, 0.14798, 0.14819, 0.14840, 0.14860, 0.14881, 0.14902, 0.14923, 0.14944, 0.14965, 
			0.14986, 0.15008, 0.15029, 0.15051, 0.15072, 0.15094, 0.15116, 0.15137, 0.15159, 0.15182, 
			0.15204, 0.15226, 0.15248, 0.15271, 0.15293, 0.15316, 0.15339, 0.15362, 0.15385, 0.15408, 
			0.15431, 0.15454, 0.15478, 0.15501, 0.15525, 0.15548, 0.15572, 0.15596, 0.15620, 0.15644, 
			0.15669, 0.15693, 0.15717, 0.15742, 0.15767, 0.15792, 0.15817, 0.15842, 0.15867, 0.15892, 
			0.15918, 0.15943, 0.15969, 0.15995, 0.16021, 0.16047, 0.16073, 0.16099, 0.16126, 0.16152, 
			0.16179, 0.16206, 0.16233, 0.16260, 0.16287, 0.16315, 0.16342, 0.16370, 0.16398, 0.16426, 
			0.16454, 0.16482, 0.16510, 0.16539, 0.16568, 0.16597, 0.16626, 0.16655, 0.16684, 0.16713, 
			0.16743, 0.16773, 0.16803, 0.16833, 0.16863, 0.16894, 0.16924, 0.16955, 0.16986, 0.17017, 
			0.17048, 0.17080, 0.17111, 0.17143, 0.17175, 0.17207, 0.17239, 0.17272, 0.17305, 0.17337, 
			0.17371, 0.17404, 0.17437, 0.17471, 0.17505, 0.17539, 0.17573, 0.17607, 0.17642, 0.17677, 
			0.17712, 0.17747, 0.17783, 0.17818, 0.17854, 0.17890, 0.17927, 0.17963, 0.18000, 0.18037, 
			0.18074, 0.18112, 0.18150, 0.18187, 0.18226, 0.18264, 0.18303, 0.18342, 0.18381, 0.18420, 
			0.18460, 0.18500, 0.18540, 0.18580, 0.18621, 0.18662, 0.18703, 0.18745, 0.18787, 0.18829, 
			0.18871, 0.18914, 0.18957, 0.19000, 0.19044, 0.19087, 0.19132, 0.19176, 0.19221, 0.19266, 
			0.19311, 0.19357, 0.19403, 0.19449, 0.19496, 0.19543, 0.19590, 0.19638, 0.19686, 0.19735, 
			0.19783, 0.19833, 0.19882, 0.19932, 0.19982, 0.20033, 0.20084, 0.20135, 0.20187, 0.20239, 
			0.20292, 0.20345, 0.20398, 0.20452, 0.20506, 0.20561, 0.20616, 0.20672, 0.20728, 0.20785, 
			0.20842, 0.20899, 0.20957, 0.21015, 0.21074, 0.21134, 0.21193, 0.21254, 0.21315, 0.21376, 
			0.21438, 0.21501, 0.21564, 0.21627, 0.21691, 0.21756, 0.21822, 0.21887, 0.21954, 0.22021, 
			0.22089, 0.22157, 0.22226, 0.22296, 0.22366, 0.22437, 0.22509, 0.22581, 0.22654, 0.22728, 
			0.22802, 0.22877, 0.22953, 0.23030, 0.23107, 0.23185, 0.23264, 0.23344, 0.23425, 0.23506, 
			0.23589, 0.23672, 0.23756, 0.23841, 0.23926, 0.24013, 0.24101, 0.24190, 0.24279, 0.24370, 
			0.24461, 0.24554, 0.24648, 0.24743, 0.24838, 0.24935, 0.25033, 0.25133, 0.25233, 0.25335, 
			0.25438, 0.25542, 0.25647, 0.25754, 0.25862, 0.25971, 0.26082, 0.26194, 0.26307, 0.26422, 
			0.26539, 0.26657, 0.26777, 0.26898, 0.27021, 0.27145, 0.27271, 0.27399, 0.27529, 0.27660, 
			0.27794, 0.27929, 0.28066, 0.28206, 0.28347, 0.28490, 0.28636, 0.28784, 0.28934, 0.29086, 
			0.29241, 0.29398, 0.29558, 0.29720, 0.29885, 0.30052, 0.30222, 0.30396, 0.30572, 0.30751, 
			0.30933, 0.31118, 0.31307, 0.31499, 0.31694, 0.31893, 0.32102, 0.32308, 0.32519, 0.32733, 
			0.32951, 0.33174, 0.33401, 0.33632, 0.33868, 0.34109, 0.34355, 0.34606, 0.34863, 0.35125, 
			0.35393, 0.35666, 0.35946, 0.36232, 0.36524, 0.36824, 0.37125, 0.37439, 0.37759, 0.38088, 
			0.38425, 0.38771, 0.39126, 0.39490, 0.39864, 0.40247, 0.40641, 0.41046, 0.41462, 0.41890, 
			0.42331, 0.42784, 0.43250, 0.43731, 0.44226, 0.44737, 0.45264, 0.45808, 0.46369, 0.46949, 
			0.47548, 0.48168, 0.48809, 0.49473, 0.50160, 0.50873, 0.51611, 0.52378, 0.53173, 0.53999, 
			0.54857, 0.55749, 0.56677, 0.57643, 0.58649, 0.59696, 0.60788, 0.61927, 0.63115, 0.64354, 
			0.65648, 0.66999, 0.68410, 0.69884, 0.71424, 0.73033, 0.74715, 0.76471, 0.78305, 0.80220, 
			0.82218, 0.84301, 0.86472, 0.88732, 0.91082, 0.93522, 0.96052, 0.98672, 1.01379, 1.04171, 
			1.07043, 1.09992, 1.13013, 1.16097, 1.19239, 1.22431, 1.25663, 1.28928, 1.32215, 1.35516, 
			1.38822, 1.42125, 1.45416, 1.48689, 1.51936, 1.55152, 1.58334, 1.61476, 1.64576, 1.67632, 
			1.70644, 1.73609, 1.76528, 1.79402, 1.82231, 1.85016, 1.87758, 1.90459, 1.93121, 1.95743, 
			1.98329, 2.00880, 2.03396, 2.05879, 2.08331, 2.10752, 2.13144, 2.15508, 2.17845, 2.20156, 
			2.22441, 2.24703, 2.26940, 2.29155, 2.31347, 2.33519, 2.35669, 2.37799, 2.39910, 2.42001, 
			2.44074, 2.46129, 2.48167, 2.50187, 2.52191, 2.54179, 2.56150, 2.58107, 2.60048, 2.61974, 
			2.63887, 2.65785, 2.67669, 2.69540, 2.71397, 2.73242, 2.75074, 2.76894, 2.78702, 2.80498, 
			2.82282, 2.84055, 2.85816, 2.87567, 2.89307, 2.91036, 2.92755, 2.94464, 2.96163, 2.97852, 
			2.99531, 3.01201, 3.02862, 3.04513, 3.06156, 3.07789, 3.09414, 3.11030, 3.12638, 3.14237, 
			3.15829  };
		
		double ZFSD[] = {
			0.07573, 0.07584, 0.07594, 0.07604, 0.07615, 0.07625, 0.07636, 0.07647, 0.07657, 0.07668, 
			0.07679, 0.07689, 0.07700, 0.07711, 0.07722, 0.07733, 0.07744, 0.07755, 0.07766, 0.07777, 
			0.07788, 0.07800, 0.07811, 0.07822, 0.07834, 0.07845, 0.07857, 0.07868, 0.07880, 0.07891, 
			0.07903, 0.07915, 0.07927, 0.07938, 0.07950, 0.07962, 0.07974, 0.07986, 0.07998, 0.08011, 
			0.08023, 0.08035, 0.08047, 0.08060, 0.08072, 0.08085, 0.08097, 0.08110, 0.08122, 0.08135, 
			0.08148, 0.08161, 0.08174, 0.08187, 0.08200, 0.08213, 0.08226, 0.08239, 0.08252, 0.08265, 
			0.08279, 0.08292, 0.08306, 0.08319, 0.08333, 0.08347, 0.08361, 0.08374, 0.08388, 0.08402, 
			0.08416, 0.08430, 0.08445, 0.08459, 0.08473, 0.08488, 0.08502, 0.08517, 0.08531, 0.08546, 
			0.08561, 0.08575, 0.08590, 0.08605, 0.08620, 0.08636, 0.08651, 0.08666, 0.08681, 0.08697, 
			0.08712, 0.08728, 0.08744, 0.08760, 0.08775, 0.08791, 0.08807, 0.08824, 0.08840, 0.08856, 
			0.08873, 0.08889, 0.08906, 0.08922, 0.08939, 0.08956, 0.08973, 0.08990, 0.09007, 0.09024, 
			0.09042, 0.09059, 0.09077, 0.09094, 0.09112, 0.09130, 0.09148, 0.09166, 0.09184, 0.09202, 
			0.09220, 0.09239, 0.09257, 0.09276, 0.09295, 0.09314, 0.09333, 0.09352, 0.09371, 0.09391, 
			0.09410, 0.09430, 0.09449, 0.09469, 0.09489, 0.09509, 0.09530, 0.09550, 0.09570, 0.09591, 
			0.09612, 0.09633, 0.09654, 0.09675, 0.09696, 0.09718, 0.09739, 0.09761, 0.09783, 0.09805, 
			0.09827, 0.09849, 0.09871, 0.09894, 0.09917, 0.09940, 0.09963, 0.09986, 0.10009, 0.10033, 
			0.10057, 0.10080, 0.10104, 0.10129, 0.10153, 0.10178, 0.10202, 0.10227, 0.10252, 0.10277, 
			0.10303, 0.10329, 0.10354, 0.10380, 0.10407, 0.10433, 0.10459, 0.10486, 0.10513, 0.10540, 
			0.10568, 0.10595, 0.10623, 0.10651, 0.10680, 0.10708, 0.10737, 0.10766, 0.10795, 0.10824, 
			0.10854, 0.10884, 0.10914, 0.10944, 0.10975, 0.11006, 0.11037, 0.11068, 0.11100, 0.11132, 
			0.11164, 0.11197, 0.11229, 0.11262, 0.11296, 0.11329, 0.11363, 0.11397, 0.11432, 0.11467, 
			0.11502, 0.11537, 0.11573, 0.11609, 0.11646, 0.11682, 0.11720, 0.11757, 0.11795, 0.11833, 
			0.11872, 0.11910, 0.11950, 0.11989, 0.12030, 0.12070, 0.12111, 0.12152, 0.12194, 0.12236, 
			0.12278, 0.12321, 0.12365, 0.12409, 0.12453, 0.12498, 0.12543, 0.12589, 0.12635, 0.12682, 
			0.12729, 0.12777, 0.12825, 0.12874, 0.12923, 0.12973, 0.13024, 0.13075, 0.13126, 0.13178, 
			0.13231, 0.13285, 0.13339, 0.13394, 0.13449, 0.13505, 0.13562, 0.13619, 0.13678, 0.13737, 
			0.13796, 0.13857, 0.13918, 0.13980, 0.14043, 0.14106, 0.14171, 0.14236, 0.14302, 0.14369, 
			0.14437, 0.14506, 0.14576, 0.14647, 0.14719, 0.14792, 0.14866, 0.14941, 0.15017, 0.15094, 
			0.15173, 0.15252, 0.15333, 0.15415, 0.15498, 0.15583, 0.15669, 0.15756, 0.15845, 0.15935, 
			0.16026, 0.16119, 0.16214, 0.16310, 0.16408, 0.16508, 0.16596, 0.16699, 0.16804, 0.16911, 
			0.17020, 0.17131, 0.17244, 0.17358, 0.17475, 0.17595, 0.17716, 0.17840, 0.17966, 0.18095, 
			0.18226, 0.18360, 0.18497, 0.18636, 0.18779, 0.18924, 0.19082, 0.19233, 0.19391, 0.19550, 
			0.19711, 0.19876, 0.20046, 0.20218, 0.20395, 0.20575, 0.20760, 0.20950, 0.21143, 0.21342, 
			0.21545, 0.21753, 0.21966, 0.22185, 0.22409, 0.22639, 0.22874, 0.23116, 0.23363, 0.23618, 
			0.23878, 0.24146, 0.24420, 0.24702, 0.24990, 0.25287, 0.25591, 0.25903, 0.26222, 0.26550, 
			0.26886, 0.27230, 0.27583, 0.27944, 0.28313, 0.28690, 0.29075, 0.29468, 0.29868, 0.30274, 
			0.30687, 0.31106, 0.31529, 0.31956, 0.32386, 0.32816, 0.33246, 0.33673, 0.34095, 0.34510, 
			0.34915, 0.35307, 0.35683, 0.36039, 0.36372, 0.36678, 0.36952, 0.37190, 0.37389, 0.37544, 
			0.37653, 0.37711, 0.37716, 0.37667, 0.37561, 0.37398, 0.37179, 0.36906, 0.36581, 0.36207, 
			0.35789, 0.35332, 0.34841, 0.34323, 0.33783, 0.33228, 0.32663, 0.32095, 0.31529, 0.30968, 
			0.30416, 0.29878, 0.29355, 0.28848, 0.28360, 0.27891, 0.27440, 0.27009, 0.26596, 0.26201, 
			0.25823, 0.25462, 0.25116, 0.24784, 0.24466, 0.24161, 0.23868, 0.23586, 0.23314, 0.23053, 
			0.22800, 0.22556, 0.22321, 0.22093, 0.21872, 0.21658, 0.21451, 0.21250, 0.21054, 0.20865, 
			0.20680, 0.20501, 0.20326, 0.20156, 0.19990, 0.19828, 0.19670, 0.19516, 0.19366, 0.19220, 
			0.19076, 0.18936, 0.18799, 0.18665, 0.18534, 0.18406, 0.18281, 0.18158, 0.18037, 0.17919, 
			0.17804, 0.17690, 0.17579, 0.17470, 0.17363, 0.17257, 0.17154, 0.17053, 0.16953, 0.16856, 
			0.16760, 0.16665, 0.16572, 0.16481, 0.16391, 0.16303, 0.16216, 0.16131, 0.16047, 0.15964, 
			0.15882 };
		
#ifndef USE_TABLES
		const float LIMIT_L(-22.0);
		const float LIMIT_IS(-4.0);
		const float LIMIT_U(20.0);
		double h = I/sigma;
		J = sigJ = F = sigF = clipper::Util::nan();
		
		if ( h < LIMIT_IS ) {
			nrej++;
			if (debug) printf("unphys: %f %f %f\n",I,sigma,h);
			return(0);
		} else {
			if ( clipper::Util::is_nan(h) ) {
				return(0);
			} else {
				if (h > LIMIT_U) {
					J = h*sigma;
					sigJ = sigma;
					F = sqrt(J);
					sigF = 0.5*sigma/F;
				} else {
					double x = -h;
					double moment[5];
					double ep = std::exp(-0.25*h*h);
					//moment[0] = std::sqrt(std::pow(2.0,0.0)/clipper::Util::pi() )*std::pow(2.0,-0.5)*tgamma(1.0)*ep*ctruncate::Utils::pbdv(-1.0,x);
					//moment[1] = std::sqrt(std::pow(2.0,0.5)/clipper::Util::pi() )*std::pow(2.0,-0.75)*tgamma(1.5)*ep*ctruncate::Utils::pbdv(-1.5,x);
					//moment[2] = std::sqrt(std::pow(2.0,1.0)/clipper::Util::pi() )*std::pow(2.0,-1.0)*tgamma(2.0)*ep*ctruncate::Utils::pbdv(-2.0,x);
					//moment[4] = std::sqrt(std::pow(2.0,2.0)/clipper::Util::pi() )*std::pow(2.0,-1.5)*tgamma(3.0)*ep*ctruncate::Utils::pbdv(-3.0,x);					
					for (int i=0 ; i != 5 ; ++i ) {
						double mu = 0.5*double(i);
						double a = -mu-1.0;
						moment[i] = std::sqrt(std::pow(2.0,mu)/clipper::Util::pi() )*std::pow(2.0,-(mu+1.0)/2.0)*tgamma(mu+1.0)*ep*ctruncate::Utils::pbdv(a,x);
					}
					J = moment[2]/moment[0]*sigma;
					sigJ = std::sqrt(moment[4]/moment[0] - std::pow(moment[2],2)/std::pow(moment[0],2))*sigma;
					F = moment[1]/moment[0]*sqrt(sigma);
					sigF = std::sqrt((moment[2]/moment[0]) - std::pow(moment[1],2)/std::pow(moment[0],2))*sqrt(sigma);
				}
			}
			return(1);
		}
#else
		float h,x,delta;
		int n;
        const float LIMIT_U(10.0);
		const float LIMIT_L(-37.0);
		const float LIMIT_IS(-4.0);
		// Bayesian statistics tells us to modify I/sigma by subtracting off sigma/S
		// where S is the mean intensity in the resolution shell
		h = I/sigma;
		// reject as unphysical reflections for which I < -4.0 sigma
		if ( h < LIMIT_IS ) {
			nrej++;
			if (debug) printf("unphys: %f %f %f\n",I,sigma,h);
			return(0);
		} else {
			if (h < LIMIT_U) {
				// use look up table if -4.0 < h < 10.0
				x = 10.0*(h-LIMIT_L);
				n = int(x);
				delta = x-n;
				// linear interpolation
				J = (1.0-delta)*ZJ[n] + delta*ZJ[n+1];
				sigJ = (1.0-delta)*ZJSD[n] + delta*ZJSD[n+1];
				F = (1.0-delta)*ZF[n] + delta*ZF[n+1];
				sigF = (1.0-delta)*ZFSD[n] + delta*ZFSD[n+1];
				// look up table gives J/sigma, so multiply by sigma to get output intensity
				J *= sigma;
				sigJ *= sigma;
				F *= sqrt(sigma);
				sigF *= sqrt(sigma);
			} else {
				// if h > 10.0 intensities are unchanged by truncate
				J = h*sigma;
				sigJ = sigma;
				F = sqrt(J);
				sigF = 0.5*sigma/F;
			}
			return(1);
		}
#endif
	}
	
	// flat prior of Sivia and David, based on PDE of F
	int truncate_sivia_calc(float I, float sigma, float& J, float& sigJ, float& F, float& sigF, int& nrej, bool debug)
	{
		if (I/sigma < -4.0 || I < -4.0 ) {
			nrej++;
			if (debug) printf("unphys: %f %f\n",I,sigma);
			return(0);
		}
		F = 0.5*std::sqrt(2.0*I+std::sqrt(4.0*I*I+8.0*sigma*sigma));
		sigF = 1.0/std::sqrt( (1.0/(F*F))+2.0*(3.0*F*F-I)/(sigma*sigma) );
		J = F*F;
		sigJ = 2.0*F*sigF;
		return(1);
 	}
	
	int truncate(clipper::HKL_data<clipper::data32::I_sigI>& isig, clipper::HKL_data<clipper::data32::I_sigI>& jsig, 
				 clipper::HKL_data<clipper::data32::F_sigF>& fsig, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		float J, sigJ, F, sigF;
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !isig[ih].missing() || ih.invresolsq() <=  reso.invresolsq_limit() ) {
				float I = isig[ih].I();
				float sigma = isig[ih].sigI();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_flat(I, sigma, J, sigJ, F, sigF, nrej, debug);
				if (iflag) {
					jsig[ih].I() = J*weight;
					jsig[ih].sigI() = sigJ*weight;
					fsig[ih].f() = F*scalef*sqwt;
					fsig[ih].sigf() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I() = clipper::Util::nan();
					jsig[ih].sigI() = clipper::Util::nan();
					fsig[ih].f() = clipper::Util::nan();
					fsig[ih].sigf() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I() = clipper::Util::nan();
				jsig[ih].sigI() = clipper::Util::nan();
				fsig[ih].f() = clipper::Util::nan();
				fsig[ih].sigf() = clipper::Util::nan();
			}
		}
		return(1);
	}
	
	
	int truncate(clipper::HKL_data<clipper::data32::J_sigJ_ano>& isig, clipper::HKL_data<clipper::data32::J_sigJ_ano>& jsig,
				 clipper::HKL_data<clipper::data32::G_sigG_ano>& fsig, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	
	// takes anomalous I's as input for flat prior
	
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		float J, sigJ, F, sigF;
		float invr2 = reso.invresolsq_limit();
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !clipper::Util::is_nan(isig[ih].I_pl() ) ) {
				float I = isig[ih].I_pl();
				float sigma = isig[ih].sigI_pl();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_flat(I, sigma, J, sigJ, F, sigF, nrej, debug);	
				if (iflag) {
					jsig[ih].I_pl() = J*weight;
					jsig[ih].sigI_pl() = sigJ*weight;
					fsig[ih].f_pl() = F*scalef*sqwt;
					fsig[ih].sigf_pl() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I_pl() = clipper::Util::nan();
					jsig[ih].sigI_pl() = clipper::Util::nan();
					fsig[ih].f_pl() = clipper::Util::nan();
					fsig[ih].sigf_pl() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_pl() = clipper::Util::nan();
				jsig[ih].sigI_pl() = clipper::Util::nan();
				fsig[ih].f_pl() = clipper::Util::nan();
				fsig[ih].sigf_pl() = clipper::Util::nan();
			}
			
			if ( !clipper::Util::is_nan(isig[ih].I_mi() ) ) {
				float I = isig[ih].I_mi();
				float sigma = isig[ih].sigI_mi();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_flat(I, sigma, J, sigJ, F, sigF, nrej, debug);	
				if (iflag) {
					jsig[ih].I_mi() = J*weight;
					jsig[ih].sigI_mi() = sigJ*weight;
					fsig[ih].f_mi() = F*scalef*sqwt;
					fsig[ih].sigf_mi() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I_mi() = clipper::Util::nan();
					jsig[ih].sigI_mi() = clipper::Util::nan();
					fsig[ih].f_mi() = clipper::Util::nan();
					fsig[ih].sigf_mi() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_mi() = clipper::Util::nan();
				jsig[ih].sigI_mi() = clipper::Util::nan();
				fsig[ih].f_mi() = clipper::Util::nan();
				fsig[ih].sigf_mi() = clipper::Util::nan();
			}
		}
		return(1);
	}

	int truncate_sivia(clipper::HKL_data<clipper::data32::I_sigI>& isig, clipper::HKL_data<clipper::data32::I_sigI>& jsig, 
				 clipper::HKL_data<clipper::data32::F_sigF>& fsig, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		float J, sigJ, F, sigF;
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !isig[ih].missing() || ih.invresolsq() <=  reso.invresolsq_limit() ) {
				float I = isig[ih].I();
				float sigma = isig[ih].sigI();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_sivia_calc(I, sigma, J, sigJ, F, sigF, nrej, debug);
				if (iflag) {
					jsig[ih].I() = J*weight;
					jsig[ih].sigI() = sigJ*weight;
					fsig[ih].f() = F*scalef*sqwt;
					fsig[ih].sigf() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I() = clipper::Util::nan();
					jsig[ih].sigI() = clipper::Util::nan();
					fsig[ih].f() = clipper::Util::nan();
					fsig[ih].sigf() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I() = clipper::Util::nan();
				jsig[ih].sigI() = clipper::Util::nan();
				fsig[ih].f() = clipper::Util::nan();
				fsig[ih].sigf() = clipper::Util::nan();
			}
		}
		return(1);
	}
	
	
	int truncate_sivia(clipper::HKL_data<clipper::data32::J_sigJ_ano>& isig, clipper::HKL_data<clipper::data32::J_sigJ_ano>& jsig,
				 clipper::HKL_data<clipper::data32::G_sigG_ano>& fsig, float scalef, 
				 clipper::Resolution& reso, int& nrej, bool debug)
	
	// takes anomalous I's as input for flat prior
	
	{
		typedef clipper::HKL_data_base::HKL_reference_index HRI;
		float J, sigJ, F, sigF;
		float invr2 = reso.invresolsq_limit();
		int iflag;
		
		for ( HRI ih = isig.first(); !ih.last(); ih.next() ) {
			if ( !clipper::Util::is_nan(isig[ih].I_pl() ) ) {
				float I = isig[ih].I_pl();
				float sigma = isig[ih].sigI_pl();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_sivia_calc(I, sigma, J, sigJ, F, sigF, nrej, debug);	
				if (iflag) {
					jsig[ih].I_pl() = J*weight;
					jsig[ih].sigI_pl() = sigJ*weight;
					fsig[ih].f_pl() = F*scalef*sqwt;
					fsig[ih].sigf_pl() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I_pl() = clipper::Util::nan();
					jsig[ih].sigI_pl() = clipper::Util::nan();
					fsig[ih].f_pl() = clipper::Util::nan();
					fsig[ih].sigf_pl() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_pl() = clipper::Util::nan();
				jsig[ih].sigI_pl() = clipper::Util::nan();
				fsig[ih].f_pl() = clipper::Util::nan();
				fsig[ih].sigf_pl() = clipper::Util::nan();
			}
			
			if ( !clipper::Util::is_nan(isig[ih].I_mi() ) ) {
				float I = isig[ih].I_mi();
				float sigma = isig[ih].sigI_mi();
				clipper::HKL hkl = ih.hkl();
				float weight(ih.hkl_class().epsilon() );
				float sqwt = sqrt(weight);
				
				I /= weight;
				sigma /= weight;
				
				iflag = truncate_sivia_calc(I, sigma, J, sigJ, F, sigF, nrej, debug);	
				if (iflag) {
					jsig[ih].I_mi() = J*weight;
					jsig[ih].sigI_mi() = sigJ*weight;
					fsig[ih].f_mi() = F*scalef*sqwt;
					fsig[ih].sigf_mi() = sigF*scalef*sqwt;
				} else {
					jsig[ih].I_mi() = clipper::Util::nan();
					jsig[ih].sigI_mi() = clipper::Util::nan();
					fsig[ih].f_mi() = clipper::Util::nan();
					fsig[ih].sigf_mi() = clipper::Util::nan();
				}
			} else {
				jsig[ih].I_mi() = clipper::Util::nan();
				jsig[ih].sigI_mi() = clipper::Util::nan();
				fsig[ih].f_mi() = clipper::Util::nan();
				fsig[ih].sigf_mi() = clipper::Util::nan();
			}
		}
		return(1);
	}
	
	
} //end namespace
